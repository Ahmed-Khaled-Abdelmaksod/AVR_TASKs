
application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001eca  00001f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800090  00800090  00001f8e  2**0
                  ALLOC
  3 .stab         00001800  00000000  00000000  00001f90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f32  00000000  00000000  00003790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000046c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004802  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000065bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000074a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008254  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000083b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008641  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008e0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <main>
      8a:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_setDirectonPin>:
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 * @param direction   Desired direction for the GPIO pin (DIO_INPUT or DIO_OUTPUT).
 */
void DIO_setDirectonPin(const pin_t *pin,u8 direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	6b 83       	std	Y+3, r22	; 0x03
	if(direction == DIO_INPUT)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	88 23       	and	r24, r24
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_setDirectonPin+0x22>
     b66:	7e c0       	rjmp	.+252    	; 0xc64 <DIO_setDirectonPin+0x11e>
	{
		switch(pin->port)
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	83 81       	ldd	r24, Z+3	; 0x03
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	3f 83       	std	Y+7, r19	; 0x07
     b74:	2e 83       	std	Y+6, r18	; 0x06
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	69 f1       	breq	.+90     	; 0xbda <DIO_setDirectonPin+0x94>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <DIO_setDirectonPin+0x4e>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	69 f0       	breq	.+26     	; 0xbac <DIO_setDirectonPin+0x66>
     b92:	e5 c0       	rjmp	.+458    	; 0xd5e <DIO_setDirectonPin+0x218>
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	a9 f1       	breq	.+106    	; 0xc08 <DIO_setDirectonPin+0xc2>
     b9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ba0:	9f 81       	ldd	r25, Y+7	; 0x07
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <DIO_setDirectonPin+0x64>
     ba8:	46 c0       	rjmp	.+140    	; 0xc36 <DIO_setDirectonPin+0xf0>
     baa:	d9 c0       	rjmp	.+434    	; 0xd5e <DIO_setDirectonPin+0x218>
		{
		case PORTA_INDEX:
			CLEAR_BIT(DDRA,pin->pin);
     bac:	aa e3       	ldi	r26, 0x3A	; 58
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ea e3       	ldi	r30, 0x3A	; 58
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	48 2f       	mov	r20, r24
     bb8:	e9 81       	ldd	r30, Y+1	; 0x01
     bba:	fa 81       	ldd	r31, Y+2	; 0x02
     bbc:	82 81       	ldd	r24, Z+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_setDirectonPin+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_setDirectonPin+0x84>
     bd2:	80 95       	com	r24
     bd4:	84 23       	and	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	c2 c0       	rjmp	.+388    	; 0xd5e <DIO_setDirectonPin+0x218>
			break;
		case PORTB_INDEX:
			CLEAR_BIT(DDRB,pin->pin);
     bda:	a7 e3       	ldi	r26, 0x37	; 55
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e3       	ldi	r30, 0x37	; 55
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	e9 81       	ldd	r30, Y+1	; 0x01
     be8:	fa 81       	ldd	r31, Y+2	; 0x02
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_setDirectonPin+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_setDirectonPin+0xb2>
     c00:	80 95       	com	r24
     c02:	84 23       	and	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	ab c0       	rjmp	.+342    	; 0xd5e <DIO_setDirectonPin+0x218>
			break;
		case PORTC_INDEX:
			CLEAR_BIT(DDRC,pin->pin);
     c08:	a4 e3       	ldi	r26, 0x34	; 52
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e4 e3       	ldi	r30, 0x34	; 52
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	48 2f       	mov	r20, r24
     c14:	e9 81       	ldd	r30, Y+1	; 0x01
     c16:	fa 81       	ldd	r31, Y+2	; 0x02
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_setDirectonPin+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_setDirectonPin+0xe0>
     c2e:	80 95       	com	r24
     c30:	84 23       	and	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	94 c0       	rjmp	.+296    	; 0xd5e <DIO_setDirectonPin+0x218>
			break;
		case PORTD_INDEX:
			CLEAR_BIT(DDRD,pin->pin);
     c36:	a1 e3       	ldi	r26, 0x31	; 49
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e1 e3       	ldi	r30, 0x31	; 49
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	e9 81       	ldd	r30, Y+1	; 0x01
     c44:	fa 81       	ldd	r31, Y+2	; 0x02
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_setDirectonPin+0x112>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_setDirectonPin+0x10e>
     c5c:	80 95       	com	r24
     c5e:	84 23       	and	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	7d c0       	rjmp	.+250    	; 0xd5e <DIO_setDirectonPin+0x218>
			break;
		}
	}
	else if(direction == DIO_OUTPUT)
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	09 f0       	breq	.+2      	; 0xc6c <DIO_setDirectonPin+0x126>
     c6a:	79 c0       	rjmp	.+242    	; 0xd5e <DIO_setDirectonPin+0x218>
	{
		switch(pin->port)
     c6c:	e9 81       	ldd	r30, Y+1	; 0x01
     c6e:	fa 81       	ldd	r31, Y+2	; 0x02
     c70:	83 81       	ldd	r24, Z+3	; 0x03
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	3d 83       	std	Y+5, r19	; 0x05
     c78:	2c 83       	std	Y+4, r18	; 0x04
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	9d 81       	ldd	r25, Y+5	; 0x05
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	91 05       	cpc	r25, r1
     c82:	61 f1       	breq	.+88     	; 0xcdc <DIO_setDirectonPin+0x196>
     c84:	2c 81       	ldd	r18, Y+4	; 0x04
     c86:	3d 81       	ldd	r19, Y+5	; 0x05
     c88:	22 30       	cpi	r18, 0x02	; 2
     c8a:	31 05       	cpc	r19, r1
     c8c:	2c f4       	brge	.+10     	; 0xc98 <DIO_setDirectonPin+0x152>
     c8e:	8c 81       	ldd	r24, Y+4	; 0x04
     c90:	9d 81       	ldd	r25, Y+5	; 0x05
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	69 f0       	breq	.+26     	; 0xcb0 <DIO_setDirectonPin+0x16a>
     c96:	63 c0       	rjmp	.+198    	; 0xd5e <DIO_setDirectonPin+0x218>
     c98:	2c 81       	ldd	r18, Y+4	; 0x04
     c9a:	3d 81       	ldd	r19, Y+5	; 0x05
     c9c:	22 30       	cpi	r18, 0x02	; 2
     c9e:	31 05       	cpc	r19, r1
     ca0:	99 f1       	breq	.+102    	; 0xd08 <DIO_setDirectonPin+0x1c2>
     ca2:	8c 81       	ldd	r24, Y+4	; 0x04
     ca4:	9d 81       	ldd	r25, Y+5	; 0x05
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	91 05       	cpc	r25, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <DIO_setDirectonPin+0x168>
     cac:	43 c0       	rjmp	.+134    	; 0xd34 <DIO_setDirectonPin+0x1ee>
     cae:	57 c0       	rjmp	.+174    	; 0xd5e <DIO_setDirectonPin+0x218>
		{
		case PORTA_INDEX:
			SET_BIT(DDRA,pin->pin);
     cb0:	aa e3       	ldi	r26, 0x3A	; 58
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	ea e3       	ldi	r30, 0x3A	; 58
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	e9 81       	ldd	r30, Y+1	; 0x01
     cbe:	fa 81       	ldd	r31, Y+2	; 0x02
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 2e       	mov	r0, r18
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <DIO_setDirectonPin+0x18c>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	0a 94       	dec	r0
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <DIO_setDirectonPin+0x188>
     cd6:	84 2b       	or	r24, r20
     cd8:	8c 93       	st	X, r24
     cda:	41 c0       	rjmp	.+130    	; 0xd5e <DIO_setDirectonPin+0x218>
			break;
		case PORTB_INDEX:
			SET_BIT(DDRB,pin->pin);
     cdc:	a7 e3       	ldi	r26, 0x37	; 55
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e7 e3       	ldi	r30, 0x37	; 55
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	48 2f       	mov	r20, r24
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_setDirectonPin+0x1b8>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_setDirectonPin+0x1b4>
     d02:	84 2b       	or	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	2b c0       	rjmp	.+86     	; 0xd5e <DIO_setDirectonPin+0x218>
			break;
		case PORTC_INDEX:
			SET_BIT(DDRC,pin->pin);
     d08:	a4 e3       	ldi	r26, 0x34	; 52
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e4 e3       	ldi	r30, 0x34	; 52
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	e9 81       	ldd	r30, Y+1	; 0x01
     d16:	fa 81       	ldd	r31, Y+2	; 0x02
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_setDirectonPin+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_setDirectonPin+0x1e0>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	15 c0       	rjmp	.+42     	; 0xd5e <DIO_setDirectonPin+0x218>
			break;
		case PORTD_INDEX:
			SET_BIT(DDRD,pin->pin);
     d34:	a1 e3       	ldi	r26, 0x31	; 49
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e1 e3       	ldi	r30, 0x31	; 49
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	e9 81       	ldd	r30, Y+1	; 0x01
     d42:	fa 81       	ldd	r31, Y+2	; 0x02
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 2e       	mov	r0, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_setDirectonPin+0x210>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <DIO_setDirectonPin+0x20c>
     d5a:	84 2b       	or	r24, r20
     d5c:	8c 93       	st	X, r24
			break;
		}
	}
}
     d5e:	27 96       	adiw	r28, 0x07	; 7
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <DIO_writeLogicPin>:
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 * @param level   Desired logic level for the GPIO pin (DIO_LOW or DIO_HIGH).
 */
void DIO_writeLogicPin(const pin_t *pin,u8 level)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	27 97       	sbiw	r28, 0x07	; 7
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	6b 83       	std	Y+3, r22	; 0x03
	if(level == DIO_LOW)
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 23       	and	r24, r24
     d8e:	09 f0       	breq	.+2      	; 0xd92 <DIO_writeLogicPin+0x22>
     d90:	7e c0       	rjmp	.+252    	; 0xe8e <DIO_writeLogicPin+0x11e>
		{
			switch(pin->port)
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	83 81       	ldd	r24, Z+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3f 83       	std	Y+7, r19	; 0x07
     d9e:	2e 83       	std	Y+6, r18	; 0x06
     da0:	8e 81       	ldd	r24, Y+6	; 0x06
     da2:	9f 81       	ldd	r25, Y+7	; 0x07
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	69 f1       	breq	.+90     	; 0xe04 <DIO_writeLogicPin+0x94>
     daa:	2e 81       	ldd	r18, Y+6	; 0x06
     dac:	3f 81       	ldd	r19, Y+7	; 0x07
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <DIO_writeLogicPin+0x4e>
     db4:	8e 81       	ldd	r24, Y+6	; 0x06
     db6:	9f 81       	ldd	r25, Y+7	; 0x07
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <DIO_writeLogicPin+0x66>
     dbc:	e5 c0       	rjmp	.+458    	; 0xf88 <DIO_writeLogicPin+0x218>
     dbe:	2e 81       	ldd	r18, Y+6	; 0x06
     dc0:	3f 81       	ldd	r19, Y+7	; 0x07
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	a9 f1       	breq	.+106    	; 0xe32 <DIO_writeLogicPin+0xc2>
     dc8:	8e 81       	ldd	r24, Y+6	; 0x06
     dca:	9f 81       	ldd	r25, Y+7	; 0x07
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_writeLogicPin+0x64>
     dd2:	46 c0       	rjmp	.+140    	; 0xe60 <DIO_writeLogicPin+0xf0>
     dd4:	d9 c0       	rjmp	.+434    	; 0xf88 <DIO_writeLogicPin+0x218>
			{
			case PORTA_INDEX:
				CLEAR_BIT(PORTA,pin->pin);
     dd6:	ab e3       	ldi	r26, 0x3B	; 59
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	eb e3       	ldi	r30, 0x3B	; 59
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	e9 81       	ldd	r30, Y+1	; 0x01
     de4:	fa 81       	ldd	r31, Y+2	; 0x02
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_writeLogicPin+0x88>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_writeLogicPin+0x84>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	c2 c0       	rjmp	.+388    	; 0xf88 <DIO_writeLogicPin+0x218>
				break;
			case PORTB_INDEX:
				CLEAR_BIT(PORTB,pin->pin);
     e04:	a8 e3       	ldi	r26, 0x38	; 56
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e8 e3       	ldi	r30, 0x38	; 56
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	e9 81       	ldd	r30, Y+1	; 0x01
     e12:	fa 81       	ldd	r31, Y+2	; 0x02
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_writeLogicPin+0xb6>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_writeLogicPin+0xb2>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	ab c0       	rjmp	.+342    	; 0xf88 <DIO_writeLogicPin+0x218>
				break;
			case PORTC_INDEX:
				CLEAR_BIT(PORTC,pin->pin);
     e32:	a5 e3       	ldi	r26, 0x35	; 53
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e5 e3       	ldi	r30, 0x35	; 53
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	e9 81       	ldd	r30, Y+1	; 0x01
     e40:	fa 81       	ldd	r31, Y+2	; 0x02
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_writeLogicPin+0xe4>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_writeLogicPin+0xe0>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	94 c0       	rjmp	.+296    	; 0xf88 <DIO_writeLogicPin+0x218>
				break;
			case PORTD_INDEX:
				CLEAR_BIT(PORTD,pin->pin);
     e60:	a2 e3       	ldi	r26, 0x32	; 50
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e2 e3       	ldi	r30, 0x32	; 50
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_writeLogicPin+0x112>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_writeLogicPin+0x10e>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	7d c0       	rjmp	.+250    	; 0xf88 <DIO_writeLogicPin+0x218>
				break;
			}
		}
		else if(level == DIO_HIGH)
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <DIO_writeLogicPin+0x126>
     e94:	79 c0       	rjmp	.+242    	; 0xf88 <DIO_writeLogicPin+0x218>
		{
			switch(pin->port)
     e96:	e9 81       	ldd	r30, Y+1	; 0x01
     e98:	fa 81       	ldd	r31, Y+2	; 0x02
     e9a:	83 81       	ldd	r24, Z+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3d 83       	std	Y+5, r19	; 0x05
     ea2:	2c 83       	std	Y+4, r18	; 0x04
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	9d 81       	ldd	r25, Y+5	; 0x05
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	61 f1       	breq	.+88     	; 0xf06 <DIO_writeLogicPin+0x196>
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <DIO_writeLogicPin+0x152>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f0       	breq	.+26     	; 0xeda <DIO_writeLogicPin+0x16a>
     ec0:	63 c0       	rjmp	.+198    	; 0xf88 <DIO_writeLogicPin+0x218>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	99 f1       	breq	.+102    	; 0xf32 <DIO_writeLogicPin+0x1c2>
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <DIO_writeLogicPin+0x168>
     ed6:	43 c0       	rjmp	.+134    	; 0xf5e <DIO_writeLogicPin+0x1ee>
     ed8:	57 c0       	rjmp	.+174    	; 0xf88 <DIO_writeLogicPin+0x218>
			{
			case PORTA_INDEX:
				SET_BIT(PORTA,pin->pin);
     eda:	ab e3       	ldi	r26, 0x3B	; 59
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	eb e3       	ldi	r30, 0x3B	; 59
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	e9 81       	ldd	r30, Y+1	; 0x01
     ee8:	fa 81       	ldd	r31, Y+2	; 0x02
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_writeLogicPin+0x18c>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_writeLogicPin+0x188>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	41 c0       	rjmp	.+130    	; 0xf88 <DIO_writeLogicPin+0x218>
				break;
			case PORTB_INDEX:
				SET_BIT(PORTB,pin->pin);
     f06:	a8 e3       	ldi	r26, 0x38	; 56
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e8 e3       	ldi	r30, 0x38	; 56
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	e9 81       	ldd	r30, Y+1	; 0x01
     f14:	fa 81       	ldd	r31, Y+2	; 0x02
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_writeLogicPin+0x1b8>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_writeLogicPin+0x1b4>
     f2c:	84 2b       	or	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	2b c0       	rjmp	.+86     	; 0xf88 <DIO_writeLogicPin+0x218>
				break;
			case PORTC_INDEX:
				SET_BIT(PORTC,pin->pin);
     f32:	a5 e3       	ldi	r26, 0x35	; 53
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e3       	ldi	r30, 0x35	; 53
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	e9 81       	ldd	r30, Y+1	; 0x01
     f40:	fa 81       	ldd	r31, Y+2	; 0x02
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_writeLogicPin+0x1e4>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_writeLogicPin+0x1e0>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	15 c0       	rjmp	.+42     	; 0xf88 <DIO_writeLogicPin+0x218>
				break;
			case PORTD_INDEX:
				SET_BIT(PORTD,pin->pin);
     f5e:	a2 e3       	ldi	r26, 0x32	; 50
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e2 e3       	ldi	r30, 0x32	; 50
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	e9 81       	ldd	r30, Y+1	; 0x01
     f6c:	fa 81       	ldd	r31, Y+2	; 0x02
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_writeLogicPin+0x210>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_writeLogicPin+0x20c>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
				break;
			}
		}
}
     f88:	27 96       	adiw	r28, 0x07	; 7
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <DIO_readLogicPin>:
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 * @return u8   Logic level of the GPIO pin (DIO_LOW or DIO_HIGH).
 */
u8 DIO_readLogicPin(const pin_t *pin)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <DIO_readLogicPin+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <DIO_readLogicPin+0x8>
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_pin = 0x00;
     fac:	19 82       	std	Y+1, r1	; 0x01
	switch(pin->port)
     fae:	ea 81       	ldd	r30, Y+2	; 0x02
     fb0:	fb 81       	ldd	r31, Y+3	; 0x03
     fb2:	83 81       	ldd	r24, Z+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3d 83       	std	Y+5, r19	; 0x05
     fba:	2c 83       	std	Y+4, r18	; 0x04
     fbc:	4c 81       	ldd	r20, Y+4	; 0x04
     fbe:	5d 81       	ldd	r21, Y+5	; 0x05
     fc0:	41 30       	cpi	r20, 0x01	; 1
     fc2:	51 05       	cpc	r21, r1
     fc4:	59 f1       	breq	.+86     	; 0x101c <DIO_readLogicPin+0x82>
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	34 f4       	brge	.+12     	; 0xfdc <DIO_readLogicPin+0x42>
     fd0:	2c 81       	ldd	r18, Y+4	; 0x04
     fd2:	3d 81       	ldd	r19, Y+5	; 0x05
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	69 f0       	breq	.+26     	; 0xff4 <DIO_readLogicPin+0x5a>
     fda:	5b c0       	rjmp	.+182    	; 0x1092 <DIO_readLogicPin+0xf8>
     fdc:	4c 81       	ldd	r20, Y+4	; 0x04
     fde:	5d 81       	ldd	r21, Y+5	; 0x05
     fe0:	42 30       	cpi	r20, 0x02	; 2
     fe2:	51 05       	cpc	r21, r1
     fe4:	79 f1       	breq	.+94     	; 0x1044 <DIO_readLogicPin+0xaa>
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	91 05       	cpc	r25, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <DIO_readLogicPin+0x58>
     ff0:	3d c0       	rjmp	.+122    	; 0x106c <DIO_readLogicPin+0xd2>
     ff2:	4f c0       	rjmp	.+158    	; 0x1092 <DIO_readLogicPin+0xf8>
	{
	case PORTA_INDEX:
		local_pin = GET_BIT(PINA,pin->pin);
     ff4:	e9 e3       	ldi	r30, 0x39	; 57
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	ea 81       	ldd	r30, Y+2	; 0x02
    1000:	fb 81       	ldd	r31, Y+3	; 0x03
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a9 01       	movw	r20, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_readLogicPin+0x76>
    100c:	55 95       	asr	r21
    100e:	47 95       	ror	r20
    1010:	8a 95       	dec	r24
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_readLogicPin+0x72>
    1014:	ca 01       	movw	r24, r20
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	3b c0       	rjmp	.+118    	; 0x1092 <DIO_readLogicPin+0xf8>
		break;
	case PORTB_INDEX:
		local_pin = GET_BIT(PINB,pin->pin);
    101c:	e6 e3       	ldi	r30, 0x36	; 54
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	ea 81       	ldd	r30, Y+2	; 0x02
    1028:	fb 81       	ldd	r31, Y+3	; 0x03
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_readLogicPin+0x9e>
    1034:	55 95       	asr	r21
    1036:	47 95       	ror	r20
    1038:	8a 95       	dec	r24
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_readLogicPin+0x9a>
    103c:	ca 01       	movw	r24, r20
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	27 c0       	rjmp	.+78     	; 0x1092 <DIO_readLogicPin+0xf8>
		break;
	case PORTC_INDEX:
		local_pin = GET_BIT(PINC,pin->pin);
    1044:	e3 e3       	ldi	r30, 0x33	; 51
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	ea 81       	ldd	r30, Y+2	; 0x02
    1050:	fb 81       	ldd	r31, Y+3	; 0x03
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a9 01       	movw	r20, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_readLogicPin+0xc6>
    105c:	55 95       	asr	r21
    105e:	47 95       	ror	r20
    1060:	8a 95       	dec	r24
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_readLogicPin+0xc2>
    1064:	ca 01       	movw	r24, r20
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <DIO_readLogicPin+0xf8>
		break;
	case PORTD_INDEX:
		local_pin = GET_BIT(PIND,pin->pin);
    106c:	e0 e3       	ldi	r30, 0x30	; 48
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a9 01       	movw	r20, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_readLogicPin+0xee>
    1084:	55 95       	asr	r21
    1086:	47 95       	ror	r20
    1088:	8a 95       	dec	r24
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_readLogicPin+0xea>
    108c:	ca 01       	movw	r24, r20
    108e:	81 70       	andi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_pin;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <DIO_initPin>:
 * @brief Initialize a specific GPIO pin based on the configuration in the pin_t structure.
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin with its configuration.
 */
void DIO_initPin(const pin_t *pin)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_initPin+0x6>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
	DIO_setDirectonPin(pin,pin->direction);
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	20 81       	ld	r18, Z
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	62 2f       	mov	r22, r18
    10be:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setDirectonPin>
	DIO_writeLogicPin(pin,pin->logic);
    10c2:	e9 81       	ldd	r30, Y+1	; 0x01
    10c4:	fa 81       	ldd	r31, Y+2	; 0x02
    10c6:	21 81       	ldd	r18, Z+1	; 0x01
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	62 2f       	mov	r22, r18
    10ce:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_togglePin>:
 * @brief Toggle the logic level of a specific GPIO pin.
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 */
void DIO_togglePin(pin_t *pin)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_togglePin+0x6>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <DIO_togglePin+0x8>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	switch(pin->port)
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	83 81       	ldd	r24, Z+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3c 83       	std	Y+4, r19	; 0x04
    10f8:	2b 83       	std	Y+3, r18	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	61 f1       	breq	.+88     	; 0x115c <DIO_togglePin+0x80>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <DIO_togglePin+0x3c>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f0       	breq	.+26     	; 0x1130 <DIO_togglePin+0x54>
    1116:	63 c0       	rjmp	.+198    	; 0x11de <DIO_togglePin+0x102>
    1118:	2b 81       	ldd	r18, Y+3	; 0x03
    111a:	3c 81       	ldd	r19, Y+4	; 0x04
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	99 f1       	breq	.+102    	; 0x1188 <DIO_togglePin+0xac>
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <DIO_togglePin+0x52>
    112c:	43 c0       	rjmp	.+134    	; 0x11b4 <DIO_togglePin+0xd8>
    112e:	57 c0       	rjmp	.+174    	; 0x11de <DIO_togglePin+0x102>
	{
	case PORTA_INDEX :
		TOGGLE_BIT(PORTA,pin->pin);
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	e9 81       	ldd	r30, Y+1	; 0x01
    113e:	fa 81       	ldd	r31, Y+2	; 0x02
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_togglePin+0x76>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_togglePin+0x72>
    1156:	84 27       	eor	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	41 c0       	rjmp	.+130    	; 0x11de <DIO_togglePin+0x102>
		break;
	case PORTB_INDEX :
		TOGGLE_BIT(PORTB,pin->pin);
    115c:	a8 e3       	ldi	r26, 0x38	; 56
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_togglePin+0xa2>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_togglePin+0x9e>
    1182:	84 27       	eor	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	2b c0       	rjmp	.+86     	; 0x11de <DIO_togglePin+0x102>
		break;
	case PORTC_INDEX :
			TOGGLE_BIT(PORTC,pin->pin);
    1188:	a5 e3       	ldi	r26, 0x35	; 53
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_togglePin+0xce>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_togglePin+0xca>
    11ae:	84 27       	eor	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	15 c0       	rjmp	.+42     	; 0x11de <DIO_togglePin+0x102>
			break;
	case PORTD_INDEX :
			TOGGLE_BIT(PORTD,pin->pin);
    11b4:	a2 e3       	ldi	r26, 0x32	; 50
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e2 e3       	ldi	r30, 0x32	; 50
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	e9 81       	ldd	r30, Y+1	; 0x01
    11c2:	fa 81       	ldd	r31, Y+2	; 0x02
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_togglePin+0xfa>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_togglePin+0xf6>
    11da:	84 27       	eor	r24, r20
    11dc:	8c 93       	st	X, r24
			break;
	}

}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <DIO_setDirectonPort>:
 *
 * @param port       The GPIO port to configure (e.g., PORTA_INDEX).
 * @param direction  Desired direction for the GPIO port (DIO_INPUT or DIO_OUTPUT).
 */
void DIO_setDirectonPort(u8 port,u8 direction)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_setDirectonPort+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_setDirectonPort+0x8>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3c 83       	std	Y+4, r19	; 0x04
    1204:	2b 83       	std	Y+3, r18	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	d1 f0       	breq	.+52     	; 0x1244 <DIO_setDirectonPort+0x58>
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <DIO_setDirectonPort+0x38>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	61 f0       	breq	.+24     	; 0x123a <DIO_setDirectonPort+0x4e>
    1222:	1e c0       	rjmp	.+60     	; 0x1260 <DIO_setDirectonPort+0x74>
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	3c 81       	ldd	r19, Y+4	; 0x04
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	81 f0       	breq	.+32     	; 0x124e <DIO_setDirectonPort+0x62>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <DIO_setDirectonPort+0x6c>
    1238:	13 c0       	rjmp	.+38     	; 0x1260 <DIO_setDirectonPort+0x74>
	{
	case PORTA_INDEX :
		DDRA = direction;
    123a:	ea e3       	ldi	r30, 0x3A	; 58
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	80 83       	st	Z, r24
    1242:	0e c0       	rjmp	.+28     	; 0x1260 <DIO_setDirectonPort+0x74>
		break;
	case PORTB_INDEX :
		DDRB = direction;
    1244:	e7 e3       	ldi	r30, 0x37	; 55
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	80 83       	st	Z, r24
    124c:	09 c0       	rjmp	.+18     	; 0x1260 <DIO_setDirectonPort+0x74>
		break;
	case PORTC_INDEX :
		DDRC = direction;
    124e:	e4 e3       	ldi	r30, 0x34	; 52
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	80 83       	st	Z, r24
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <DIO_setDirectonPort+0x74>
		break;
	case PORTD_INDEX:
		DDRD = direction;
    1258:	e1 e3       	ldi	r30, 0x31	; 49
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24
		break;
	}
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <DIO_writeLogicPort>:
 *
 * @param port   The GPIO port to write to (e.g., PORTA_INDEX).
 * @param level  Desired logic level for the GPIO port (DIO_LOW or DIO_HIGH).
 */
void DIO_writeLogicPort(u8 port,u8 level)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <DIO_writeLogicPort+0x6>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <DIO_writeLogicPort+0x8>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3c 83       	std	Y+4, r19	; 0x04
    1286:	2b 83       	std	Y+3, r18	; 0x03
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	d1 f0       	breq	.+52     	; 0x12c6 <DIO_writeLogicPort+0x58>
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	2c f4       	brge	.+10     	; 0x12a6 <DIO_writeLogicPort+0x38>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	61 f0       	breq	.+24     	; 0x12bc <DIO_writeLogicPort+0x4e>
    12a4:	1e c0       	rjmp	.+60     	; 0x12e2 <DIO_writeLogicPort+0x74>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <DIO_writeLogicPort+0x62>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	91 05       	cpc	r25, r1
    12b8:	81 f0       	breq	.+32     	; 0x12da <DIO_writeLogicPort+0x6c>
    12ba:	13 c0       	rjmp	.+38     	; 0x12e2 <DIO_writeLogicPort+0x74>
		{
		case PORTA_INDEX :
			PORTA = level;
    12bc:	eb e3       	ldi	r30, 0x3B	; 59
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	80 83       	st	Z, r24
    12c4:	0e c0       	rjmp	.+28     	; 0x12e2 <DIO_writeLogicPort+0x74>
			break;
		case PORTB_INDEX :
			PORTB = level;
    12c6:	e8 e3       	ldi	r30, 0x38	; 56
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	80 83       	st	Z, r24
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <DIO_writeLogicPort+0x74>
			break;
		case PORTC_INDEX :
			PORTC = level;
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	80 83       	st	Z, r24
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <DIO_writeLogicPort+0x74>
			break;
		case PORTD_INDEX:
			PORTD = level;
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	80 83       	st	Z, r24
			break;
		}
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <DIO_readLogicPort>:
 *
 * @param port   The GPIO port to read from (e.g., PORTA_INDEX).
 * @return u8    Logic levels of the GPIO port as a byte.
 */
u8 DIO_readLogicPort(u8 port)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <DIO_readLogicPort+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_readLogicPort+0x8>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_port = 0x00;
    12fe:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <DIO_readLogicPort+0x58>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_readLogicPort+0x38>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_readLogicPort+0x4e>
    1326:	1e c0       	rjmp	.+60     	; 0x1364 <DIO_readLogicPort+0x74>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_readLogicPort+0x62>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_readLogicPort+0x6c>
    133c:	13 c0       	rjmp	.+38     	; 0x1364 <DIO_readLogicPort+0x74>
	{
	case PORTA_INDEX :
		local_port = PINA;
    133e:	e9 e3       	ldi	r30, 0x39	; 57
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <DIO_readLogicPort+0x74>
		break;
	case PORTB_INDEX :
		local_port = PINB;
    1348:	e6 e3       	ldi	r30, 0x36	; 54
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <DIO_readLogicPort+0x74>
		break;
	case PORTC_INDEX :
		local_port = PINC;
    1352:	e3 e3       	ldi	r30, 0x33	; 51
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <DIO_readLogicPort+0x74>
		break;
	case PORTD_INDEX:
		local_port = PIND;
    135c:	e0 e3       	ldi	r30, 0x30	; 48
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_port;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_initPort>:
 * @param port       The GPIO port to initialize (e.g., PORTA_INDEX).
 * @param direction  Desired direction for the GPIO port (DIO_INPUT or DIO_OUTPUT).
 * @param logic      Initial logic levels for the GPIO port (DIO_LOW or DIO_HIGH).
 */
void DIO_initPort(u8 port,u8 direction,u8 logic)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_initPort+0x6>
    137a:	0f 92       	push	r0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02
    1384:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setDirectonPort(port,direction);
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	6a 81       	ldd	r22, Y+2	; 0x02
    138a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_setDirectonPort>
	DIO_writeLogicPort(port,logic);
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	6b 81       	ldd	r22, Y+3	; 0x03
    1392:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_writeLogicPort>
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <DIO_togglePort>:
 * @brief Toggle the logic levels of all pins in a specified GPIO port.
 *
 * @param port   The GPIO port to toggle (e.g., PORTA_INDEX).
 */
void DIO_togglePort(u8 port)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <DIO_togglePort+0x6>
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3b 83       	std	Y+3, r19	; 0x03
    13b8:	2a 83       	std	Y+2, r18	; 0x02
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	e9 f0       	breq	.+58     	; 0x13fe <DIO_togglePort+0x5c>
    13c4:	2a 81       	ldd	r18, Y+2	; 0x02
    13c6:	3b 81       	ldd	r19, Y+3	; 0x03
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <DIO_togglePort+0x36>
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	9b 81       	ldd	r25, Y+3	; 0x03
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	61 f0       	breq	.+24     	; 0x13ee <DIO_togglePort+0x4c>
    13d6:	2a c0       	rjmp	.+84     	; 0x142c <DIO_togglePort+0x8a>
    13d8:	2a 81       	ldd	r18, Y+2	; 0x02
    13da:	3b 81       	ldd	r19, Y+3	; 0x03
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	b1 f0       	breq	.+44     	; 0x140e <DIO_togglePort+0x6c>
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	9b 81       	ldd	r25, Y+3	; 0x03
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	c9 f0       	breq	.+50     	; 0x141e <DIO_togglePort+0x7c>
    13ec:	1f c0       	rjmp	.+62     	; 0x142c <DIO_togglePort+0x8a>
	{
	case PORTA_INDEX :
		PORTA ^= 0xFF;
    13ee:	ab e3       	ldi	r26, 0x3B	; 59
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	eb e3       	ldi	r30, 0x3B	; 59
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 95       	com	r24
    13fa:	8c 93       	st	X, r24
    13fc:	17 c0       	rjmp	.+46     	; 0x142c <DIO_togglePort+0x8a>
		break;
	case PORTB_INDEX :
		PORTB ^= 0xFF;
    13fe:	a8 e3       	ldi	r26, 0x38	; 56
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e8 e3       	ldi	r30, 0x38	; 56
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 95       	com	r24
    140a:	8c 93       	st	X, r24
    140c:	0f c0       	rjmp	.+30     	; 0x142c <DIO_togglePort+0x8a>
		break;
	case PORTC_INDEX :
		PORTC ^= 0xFF;
    140e:	a5 e3       	ldi	r26, 0x35	; 53
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 95       	com	r24
    141a:	8c 93       	st	X, r24
    141c:	07 c0       	rjmp	.+14     	; 0x142c <DIO_togglePort+0x8a>
		break;
	case PORTD_INDEX:
		PORTD ^= 0xFF;
    141e:	a2 e3       	ldi	r26, 0x32	; 50
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e2 e3       	ldi	r30, 0x32	; 50
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 95       	com	r24
    142a:	8c 93       	st	X, r24
		break;
	}
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <DIO_setDirectionHighNibble>:
 * @brief Sets the direction of the high nibble (bits 7-4) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the high nibble (use bits 7-4).
 */
void DIO_setDirectionHighNibble(u8 port,u8 direction)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_setDirectionHighNibble+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_setDirectionHighNibble+0x8>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	6a 83       	std	Y+2, r22	; 0x02
	direction <<= 4; // 1100 0000
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	82 95       	swap	r24
    144c:	80 7f       	andi	r24, 0xF0	; 240
    144e:	8a 83       	std	Y+2, r24	; 0x02
	switch(port)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3c 83       	std	Y+4, r19	; 0x04
    1458:	2b 83       	std	Y+3, r18	; 0x03
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	29 f1       	breq	.+74     	; 0x14ae <DIO_setDirectionHighNibble+0x76>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <DIO_setDirectionHighNibble+0x40>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	61 f0       	breq	.+24     	; 0x148e <DIO_setDirectionHighNibble+0x56>
    1476:	4a c0       	rjmp	.+148    	; 0x150c <DIO_setDirectionHighNibble+0xd4>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	31 f1       	breq	.+76     	; 0x14ce <DIO_setDirectionHighNibble+0x96>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	89 f1       	breq	.+98     	; 0x14ee <DIO_setDirectionHighNibble+0xb6>
    148c:	3f c0       	rjmp	.+126    	; 0x150c <DIO_setDirectionHighNibble+0xd4>
	{
	case PORTA_INDEX :
		DDRA &= 0x0F; // 0000 0101
    148e:	aa e3       	ldi	r26, 0x3A	; 58
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ea e3       	ldi	r30, 0x3A	; 58
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8f 70       	andi	r24, 0x0F	; 15
    149a:	8c 93       	st	X, r24
		DDRA |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    149c:	aa e3       	ldi	r26, 0x3A	; 58
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ea e3       	ldi	r30, 0x3A	; 58
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	90 81       	ld	r25, Z
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	89 2b       	or	r24, r25
    14aa:	8c 93       	st	X, r24
    14ac:	2f c0       	rjmp	.+94     	; 0x150c <DIO_setDirectionHighNibble+0xd4>
		break;
	case PORTB_INDEX :
		DDRB &= 0x0F; // 0000 0101
    14ae:	a7 e3       	ldi	r26, 0x37	; 55
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e3       	ldi	r30, 0x37	; 55
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	8f 70       	andi	r24, 0x0F	; 15
    14ba:	8c 93       	st	X, r24
		DDRB |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    14bc:	a7 e3       	ldi	r26, 0x37	; 55
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e7 e3       	ldi	r30, 0x37	; 55
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	90 81       	ld	r25, Z
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	89 2b       	or	r24, r25
    14ca:	8c 93       	st	X, r24
    14cc:	1f c0       	rjmp	.+62     	; 0x150c <DIO_setDirectionHighNibble+0xd4>
		break;
	case PORTC_INDEX :
		DDRC &= 0x0F; // 0000 0101
    14ce:	a4 e3       	ldi	r26, 0x34	; 52
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e4 e3       	ldi	r30, 0x34	; 52
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 70       	andi	r24, 0x0F	; 15
    14da:	8c 93       	st	X, r24
		DDRC |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    14dc:	a4 e3       	ldi	r26, 0x34	; 52
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e4 e3       	ldi	r30, 0x34	; 52
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	90 81       	ld	r25, Z
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	89 2b       	or	r24, r25
    14ea:	8c 93       	st	X, r24
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <DIO_setDirectionHighNibble+0xd4>
		break;
	case PORTD_INDEX:
		DDRD &= 0x0F; // 0000 0101
    14ee:	a1 e3       	ldi	r26, 0x31	; 49
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e1 e3       	ldi	r30, 0x31	; 49
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 70       	andi	r24, 0x0F	; 15
    14fa:	8c 93       	st	X, r24
		DDRD |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    14fc:	a1 e3       	ldi	r26, 0x31	; 49
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e1 e3       	ldi	r30, 0x31	; 49
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	90 81       	ld	r25, Z
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	89 2b       	or	r24, r25
    150a:	8c 93       	st	X, r24
		break;
	}
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <DIO_writeLogicHighNibble>:
 * @brief Writes logic levels to the high nibble of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param level Logic levels for the high nibble (use bits 7-4).
 */
void DIO_writeLogicHighNibble(u8 port,u8 level)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <DIO_writeLogicHighNibble+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_writeLogicHighNibble+0x8>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	6a 83       	std	Y+2, r22	; 0x02
	level <<=4; // 1011 0000
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	82 95       	swap	r24
    152e:	80 7f       	andi	r24, 0xF0	; 240
    1530:	8a 83       	std	Y+2, r24	; 0x02
	switch(port)
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3c 83       	std	Y+4, r19	; 0x04
    153a:	2b 83       	std	Y+3, r18	; 0x03
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	29 f1       	breq	.+74     	; 0x1590 <DIO_writeLogicHighNibble+0x76>
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	3c 81       	ldd	r19, Y+4	; 0x04
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <DIO_writeLogicHighNibble+0x40>
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	61 f0       	breq	.+24     	; 0x1570 <DIO_writeLogicHighNibble+0x56>
    1558:	4a c0       	rjmp	.+148    	; 0x15ee <DIO_writeLogicHighNibble+0xd4>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	31 f1       	breq	.+76     	; 0x15b0 <DIO_writeLogicHighNibble+0x96>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	89 f1       	breq	.+98     	; 0x15d0 <DIO_writeLogicHighNibble+0xb6>
    156e:	3f c0       	rjmp	.+126    	; 0x15ee <DIO_writeLogicHighNibble+0xd4>
	{
	case PORTA_INDEX : // 1110 0110
		PORTA &= 0X0F; // 0000 0110
    1570:	ab e3       	ldi	r26, 0x3B	; 59
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	eb e3       	ldi	r30, 0x3B	; 59
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8f 70       	andi	r24, 0x0F	; 15
    157c:	8c 93       	st	X, r24
		PORTA |= level;// 0000 0110 | 1011 0000  = 1011 0110
    157e:	ab e3       	ldi	r26, 0x3B	; 59
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	90 81       	ld	r25, Z
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	89 2b       	or	r24, r25
    158c:	8c 93       	st	X, r24
    158e:	2f c0       	rjmp	.+94     	; 0x15ee <DIO_writeLogicHighNibble+0xd4>
		break;
	case PORTB_INDEX :
		PORTB &= 0X0F; // 0000 0110
    1590:	a8 e3       	ldi	r26, 0x38	; 56
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e8 e3       	ldi	r30, 0x38	; 56
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 70       	andi	r24, 0x0F	; 15
    159c:	8c 93       	st	X, r24
		PORTB |= level;// 0000 0110 | 1011 0000  = 1011 0110
    159e:	a8 e3       	ldi	r26, 0x38	; 56
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e8 e3       	ldi	r30, 0x38	; 56
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	90 81       	ld	r25, Z
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	89 2b       	or	r24, r25
    15ac:	8c 93       	st	X, r24
    15ae:	1f c0       	rjmp	.+62     	; 0x15ee <DIO_writeLogicHighNibble+0xd4>
		break;
	case PORTC_INDEX :
		PORTC &= 0X0F; // 0000 0110
    15b0:	a5 e3       	ldi	r26, 0x35	; 53
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e5 e3       	ldi	r30, 0x35	; 53
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 70       	andi	r24, 0x0F	; 15
    15bc:	8c 93       	st	X, r24
		PORTC |= level;// 0000 0110 | 1011 0000  = 1011 0110
    15be:	a5 e3       	ldi	r26, 0x35	; 53
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e5 e3       	ldi	r30, 0x35	; 53
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	90 81       	ld	r25, Z
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	89 2b       	or	r24, r25
    15cc:	8c 93       	st	X, r24
    15ce:	0f c0       	rjmp	.+30     	; 0x15ee <DIO_writeLogicHighNibble+0xd4>
		break;
	case PORTD_INDEX:
		PORTD &= 0X0F; // 0000 0110
    15d0:	a2 e3       	ldi	r26, 0x32	; 50
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	8c 93       	st	X, r24
		PORTD |= level;// 0000 0110 | 1011 0000  = 1011 0110
    15de:	a2 e3       	ldi	r26, 0x32	; 50
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e2 e3       	ldi	r30, 0x32	; 50
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	90 81       	ld	r25, Z
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	89 2b       	or	r24, r25
    15ec:	8c 93       	st	X, r24
		break;
	}
}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <DIO_readLogicHighNibble>:
 * @brief Reads logic levels from the high nibble of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @return Logic levels of the high nibble (bits 7-4) of the specified port.
 */
u8 DIO_readLogicHighNibble(u8 port)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <DIO_readLogicHighNibble+0x6>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <DIO_readLogicHighNibble+0x8>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_port = 0x00;
    160a:	19 82       	std	Y+1, r1	; 0x01
		switch(port)
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3c 83       	std	Y+4, r19	; 0x04
    1614:	2b 83       	std	Y+3, r18	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	d9 f0       	breq	.+54     	; 0x1656 <DIO_readLogicHighNibble+0x5a>
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	3c 81       	ldd	r19, Y+4	; 0x04
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <DIO_readLogicHighNibble+0x38>
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	61 f0       	breq	.+24     	; 0x164a <DIO_readLogicHighNibble+0x4e>
    1632:	22 c0       	rjmp	.+68     	; 0x1678 <DIO_readLogicHighNibble+0x7c>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	91 f0       	breq	.+36     	; 0x1662 <DIO_readLogicHighNibble+0x66>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	91 05       	cpc	r25, r1
    1646:	99 f0       	breq	.+38     	; 0x166e <DIO_readLogicHighNibble+0x72>
    1648:	17 c0       	rjmp	.+46     	; 0x1678 <DIO_readLogicHighNibble+0x7c>
		{
		case PORTA_INDEX :
			local_port = PINA & 0XF0;
    164a:	e9 e3       	ldi	r30, 0x39	; 57
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 7f       	andi	r24, 0xF0	; 240
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	11 c0       	rjmp	.+34     	; 0x1678 <DIO_readLogicHighNibble+0x7c>
			break;
		case PORTB_INDEX :
			local_port = PINB & 0XF0;
    1656:	e6 e3       	ldi	r30, 0x36	; 54
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 7f       	andi	r24, 0xF0	; 240
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	0b c0       	rjmp	.+22     	; 0x1678 <DIO_readLogicHighNibble+0x7c>
			break;
		case PORTC_INDEX :
			local_port = PINC & 0XF0;
    1662:	e3 e3       	ldi	r30, 0x33	; 51
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	80 7f       	andi	r24, 0xF0	; 240
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <DIO_readLogicHighNibble+0x7c>
			break;
		case PORTD_INDEX:
			local_port = PIND & 0XF0;
    166e:	e0 e3       	ldi	r30, 0x30	; 48
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 7f       	andi	r24, 0xF0	; 240
    1676:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		local_port >>= 4;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	82 95       	swap	r24
    167c:	8f 70       	andi	r24, 0x0F	; 15
    167e:	89 83       	std	Y+1, r24	; 0x01
		return local_port;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <DIO_initHighNibble>:
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the high nibble (bits 7-4), use binary or hexadecimal literals.
 * @param logic Initial logic levels for the high nibble (bits 7-4), use binary or hexadecimal literals.
 */
void DIO_initHighNibble(u8 port,u8 direction,u8 logic)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <DIO_initHighNibble+0x6>
    1696:	0f 92       	push	r0
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	6a 83       	std	Y+2, r22	; 0x02
    16a0:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setDirectionHighNibble(port,direction);
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	6a 81       	ldd	r22, Y+2	; 0x02
    16a6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_setDirectionHighNibble>
	DIO_writeLogicHighNibble(port,logic);
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	6b 81       	ldd	r22, Y+3	; 0x03
    16ae:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_writeLogicHighNibble>
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <DIO_toggleHighNibble>:
/**
 * @brief Toggles the logic levels of the high nibble of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 */
void DIO_toggleHighNibble(u8 port)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <DIO_toggleHighNibble+0x6>
    16c4:	0f 92       	push	r0
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	3b 83       	std	Y+3, r19	; 0x03
    16d4:	2a 83       	std	Y+2, r18	; 0x02
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	f1 f0       	breq	.+60     	; 0x171c <DIO_toggleHighNibble+0x5e>
    16e0:	2a 81       	ldd	r18, Y+2	; 0x02
    16e2:	3b 81       	ldd	r19, Y+3	; 0x03
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <DIO_toggleHighNibble+0x36>
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	61 f0       	breq	.+24     	; 0x170a <DIO_toggleHighNibble+0x4c>
    16f2:	2e c0       	rjmp	.+92     	; 0x1750 <DIO_toggleHighNibble+0x92>
    16f4:	2a 81       	ldd	r18, Y+2	; 0x02
    16f6:	3b 81       	ldd	r19, Y+3	; 0x03
    16f8:	22 30       	cpi	r18, 0x02	; 2
    16fa:	31 05       	cpc	r19, r1
    16fc:	c1 f0       	breq	.+48     	; 0x172e <DIO_toggleHighNibble+0x70>
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	9b 81       	ldd	r25, Y+3	; 0x03
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	91 05       	cpc	r25, r1
    1706:	e1 f0       	breq	.+56     	; 0x1740 <DIO_toggleHighNibble+0x82>
    1708:	23 c0       	rjmp	.+70     	; 0x1750 <DIO_toggleHighNibble+0x92>
	{
	case PORTA_INDEX :
		PORTA ^= 0xF0;
    170a:	ab e3       	ldi	r26, 0x3B	; 59
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	eb e3       	ldi	r30, 0x3B	; 59
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	90 81       	ld	r25, Z
    1714:	80 ef       	ldi	r24, 0xF0	; 240
    1716:	89 27       	eor	r24, r25
    1718:	8c 93       	st	X, r24
    171a:	1a c0       	rjmp	.+52     	; 0x1750 <DIO_toggleHighNibble+0x92>
		break;
	case PORTB_INDEX :
		PORTB ^= 0xF0;
    171c:	a8 e3       	ldi	r26, 0x38	; 56
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	90 81       	ld	r25, Z
    1726:	80 ef       	ldi	r24, 0xF0	; 240
    1728:	89 27       	eor	r24, r25
    172a:	8c 93       	st	X, r24
    172c:	11 c0       	rjmp	.+34     	; 0x1750 <DIO_toggleHighNibble+0x92>
		break;
	case PORTC_INDEX :
		PORTC ^= 0xF0;
    172e:	a5 e3       	ldi	r26, 0x35	; 53
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e5 e3       	ldi	r30, 0x35	; 53
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	90 81       	ld	r25, Z
    1738:	80 ef       	ldi	r24, 0xF0	; 240
    173a:	89 27       	eor	r24, r25
    173c:	8c 93       	st	X, r24
    173e:	08 c0       	rjmp	.+16     	; 0x1750 <DIO_toggleHighNibble+0x92>
		break;
	case PORTD_INDEX:
		PORTD ^= 0xF0;
    1740:	a2 e3       	ldi	r26, 0x32	; 50
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e2 e3       	ldi	r30, 0x32	; 50
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	90 81       	ld	r25, Z
    174a:	80 ef       	ldi	r24, 0xF0	; 240
    174c:	89 27       	eor	r24, r25
    174e:	8c 93       	st	X, r24
		break;
	}
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <DIO_setDirectionLowNibble>:
 * @brief Sets the direction of the low nibble (bits 3-0) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the low nibble (use bits 3-0).
 */
void DIO_setDirectionLowNibble(u8 port,u8 direction)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <DIO_setDirectionLowNibble+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <DIO_setDirectionLowNibble+0x8>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	6a 83       	std	Y+2, r22	; 0x02
	direction &= 0x0F; // 0000 0110
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	8f 70       	andi	r24, 0x0F	; 15
    1770:	8a 83       	std	Y+2, r24	; 0x02
		switch(port)
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3c 83       	std	Y+4, r19	; 0x04
    177a:	2b 83       	std	Y+3, r18	; 0x03
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	29 f1       	breq	.+74     	; 0x17d0 <DIO_setDirectionLowNibble+0x74>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	2c f4       	brge	.+10     	; 0x179a <DIO_setDirectionLowNibble+0x3e>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	61 f0       	breq	.+24     	; 0x17b0 <DIO_setDirectionLowNibble+0x54>
    1798:	4a c0       	rjmp	.+148    	; 0x182e <DIO_setDirectionLowNibble+0xd2>
    179a:	2b 81       	ldd	r18, Y+3	; 0x03
    179c:	3c 81       	ldd	r19, Y+4	; 0x04
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	31 f1       	breq	.+76     	; 0x17f0 <DIO_setDirectionLowNibble+0x94>
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	89 f1       	breq	.+98     	; 0x1810 <DIO_setDirectionLowNibble+0xb4>
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <DIO_setDirectionLowNibble+0xd2>
		{
		case PORTA_INDEX :
			DDRA &= 0xF0; // 0101 0000
    17b0:	aa e3       	ldi	r26, 0x3A	; 58
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ea e3       	ldi	r30, 0x3A	; 58
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 7f       	andi	r24, 0xF0	; 240
    17bc:	8c 93       	st	X, r24
			DDRA |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    17be:	aa e3       	ldi	r26, 0x3A	; 58
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ea e3       	ldi	r30, 0x3A	; 58
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	90 81       	ld	r25, Z
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	89 2b       	or	r24, r25
    17cc:	8c 93       	st	X, r24
    17ce:	2f c0       	rjmp	.+94     	; 0x182e <DIO_setDirectionLowNibble+0xd2>
			break;
		case PORTB_INDEX :
			DDRB &= 0xF0; // 0101 0000
    17d0:	a7 e3       	ldi	r26, 0x37	; 55
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e7 e3       	ldi	r30, 0x37	; 55
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 7f       	andi	r24, 0xF0	; 240
    17dc:	8c 93       	st	X, r24
			DDRB |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    17de:	a7 e3       	ldi	r26, 0x37	; 55
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e7 e3       	ldi	r30, 0x37	; 55
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	90 81       	ld	r25, Z
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	89 2b       	or	r24, r25
    17ec:	8c 93       	st	X, r24
    17ee:	1f c0       	rjmp	.+62     	; 0x182e <DIO_setDirectionLowNibble+0xd2>
			break;
		case PORTC_INDEX :
			DDRC &= 0xF0; // 0101 0000
    17f0:	a4 e3       	ldi	r26, 0x34	; 52
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e4 e3       	ldi	r30, 0x34	; 52
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 7f       	andi	r24, 0xF0	; 240
    17fc:	8c 93       	st	X, r24
			DDRC |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    17fe:	a4 e3       	ldi	r26, 0x34	; 52
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e4 e3       	ldi	r30, 0x34	; 52
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	90 81       	ld	r25, Z
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	89 2b       	or	r24, r25
    180c:	8c 93       	st	X, r24
    180e:	0f c0       	rjmp	.+30     	; 0x182e <DIO_setDirectionLowNibble+0xd2>
			break;
		case PORTD_INDEX:
			DDRD &= 0xF0; // 0101 0000
    1810:	a1 e3       	ldi	r26, 0x31	; 49
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e1 e3       	ldi	r30, 0x31	; 49
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 7f       	andi	r24, 0xF0	; 240
    181c:	8c 93       	st	X, r24
			DDRD |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    181e:	a1 e3       	ldi	r26, 0x31	; 49
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e1 e3       	ldi	r30, 0x31	; 49
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	90 81       	ld	r25, Z
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	89 2b       	or	r24, r25
    182c:	8c 93       	st	X, r24
			break;
		}
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <DIO_writeLogicLowNibble>:
 * @brief Writes logic levels to the low nibble (bits 3-0) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param level Logic levels for the low nibble (use bits 3-0).
 */
void DIO_writeLogicLowNibble(u8 port,u8 level)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <DIO_writeLogicLowNibble+0x6>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <DIO_writeLogicLowNibble+0x8>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	6a 83       	std	Y+2, r22	; 0x02
	level &= 0x0F; // 0000 0110
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	8f 70       	andi	r24, 0x0F	; 15
    1850:	8a 83       	std	Y+2, r24	; 0x02
	switch(port)
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3c 83       	std	Y+4, r19	; 0x04
    185a:	2b 83       	std	Y+3, r18	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	91 05       	cpc	r25, r1
    1864:	29 f1       	breq	.+74     	; 0x18b0 <DIO_writeLogicLowNibble+0x74>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	2c f4       	brge	.+10     	; 0x187a <DIO_writeLogicLowNibble+0x3e>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	61 f0       	breq	.+24     	; 0x1890 <DIO_writeLogicLowNibble+0x54>
    1878:	4a c0       	rjmp	.+148    	; 0x190e <DIO_writeLogicLowNibble+0xd2>
    187a:	2b 81       	ldd	r18, Y+3	; 0x03
    187c:	3c 81       	ldd	r19, Y+4	; 0x04
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	31 05       	cpc	r19, r1
    1882:	31 f1       	breq	.+76     	; 0x18d0 <DIO_writeLogicLowNibble+0x94>
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	91 05       	cpc	r25, r1
    188c:	89 f1       	breq	.+98     	; 0x18f0 <DIO_writeLogicLowNibble+0xb4>
    188e:	3f c0       	rjmp	.+126    	; 0x190e <DIO_writeLogicLowNibble+0xd2>
	{
	case PORTA_INDEX : // 1110 0110
		PORTA &= 0XF0; // 1110 0000
    1890:	ab e3       	ldi	r26, 0x3B	; 59
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	eb e3       	ldi	r30, 0x3B	; 59
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 7f       	andi	r24, 0xF0	; 240
    189c:	8c 93       	st	X, r24
		PORTA |= level;// 1110 0000 | 0000 0110  = 1110 0110
    189e:	ab e3       	ldi	r26, 0x3B	; 59
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	eb e3       	ldi	r30, 0x3B	; 59
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	90 81       	ld	r25, Z
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	89 2b       	or	r24, r25
    18ac:	8c 93       	st	X, r24
    18ae:	2f c0       	rjmp	.+94     	; 0x190e <DIO_writeLogicLowNibble+0xd2>
		break;
	case PORTB_INDEX :// 1110 0110
		PORTB &= 0XF0; // 1110 0000
    18b0:	a8 e3       	ldi	r26, 0x38	; 56
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e8 e3       	ldi	r30, 0x38	; 56
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 7f       	andi	r24, 0xF0	; 240
    18bc:	8c 93       	st	X, r24
		PORTB |= level;// 1110 0000 | 0000 0110  = 1110 0110
    18be:	a8 e3       	ldi	r26, 0x38	; 56
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	90 81       	ld	r25, Z
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	89 2b       	or	r24, r25
    18cc:	8c 93       	st	X, r24
    18ce:	1f c0       	rjmp	.+62     	; 0x190e <DIO_writeLogicLowNibble+0xd2>
		break;
	case PORTC_INDEX :// 1110 0110
		PORTC &= 0XF0; // 1110 0000
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 7f       	andi	r24, 0xF0	; 240
    18dc:	8c 93       	st	X, r24
		PORTC |= level;// 1110 0000 | 0000 0110  = 1110 0110
    18de:	a5 e3       	ldi	r26, 0x35	; 53
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e5 e3       	ldi	r30, 0x35	; 53
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	90 81       	ld	r25, Z
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	89 2b       	or	r24, r25
    18ec:	8c 93       	st	X, r24
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <DIO_writeLogicLowNibble+0xd2>
		break;
	case PORTD_INDEX:// 1110 0110
		PORTD &= 0XF0; // 1110 0000
    18f0:	a2 e3       	ldi	r26, 0x32	; 50
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e2 e3       	ldi	r30, 0x32	; 50
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 7f       	andi	r24, 0xF0	; 240
    18fc:	8c 93       	st	X, r24
		PORTD |= level;// 1110 0000 | 0000 0110  = 1110 0110
    18fe:	a2 e3       	ldi	r26, 0x32	; 50
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	90 81       	ld	r25, Z
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	89 2b       	or	r24, r25
    190c:	8c 93       	st	X, r24
		break;
	}
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <DIO_readLogicLowNibble>:
 * @brief Reads logic levels from the low nibble (bits 3-0) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @return Logic levels of the low nibble of the specified port.
 */
u8 DIO_readLogicLowNibble(u8 port)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <DIO_readLogicLowNibble+0x6>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <DIO_readLogicLowNibble+0x8>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_port = 0x00;
    192a:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3c 83       	std	Y+4, r19	; 0x04
    1934:	2b 83       	std	Y+3, r18	; 0x03
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	d9 f0       	breq	.+54     	; 0x1976 <DIO_readLogicLowNibble+0x5a>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	2c f4       	brge	.+10     	; 0x1954 <DIO_readLogicLowNibble+0x38>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	61 f0       	breq	.+24     	; 0x196a <DIO_readLogicLowNibble+0x4e>
    1952:	22 c0       	rjmp	.+68     	; 0x1998 <DIO_readLogicLowNibble+0x7c>
    1954:	2b 81       	ldd	r18, Y+3	; 0x03
    1956:	3c 81       	ldd	r19, Y+4	; 0x04
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	91 f0       	breq	.+36     	; 0x1982 <DIO_readLogicLowNibble+0x66>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	91 05       	cpc	r25, r1
    1966:	99 f0       	breq	.+38     	; 0x198e <DIO_readLogicLowNibble+0x72>
    1968:	17 c0       	rjmp	.+46     	; 0x1998 <DIO_readLogicLowNibble+0x7c>
	{
	case PORTA_INDEX :
		local_port = PINA & 0X0F;
    196a:	e9 e3       	ldi	r30, 0x39	; 57
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8f 70       	andi	r24, 0x0F	; 15
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	11 c0       	rjmp	.+34     	; 0x1998 <DIO_readLogicLowNibble+0x7c>
		break;
	case PORTB_INDEX :
		local_port = PINB & 0X0F;
    1976:	e6 e3       	ldi	r30, 0x36	; 54
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 70       	andi	r24, 0x0F	; 15
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	0b c0       	rjmp	.+22     	; 0x1998 <DIO_readLogicLowNibble+0x7c>
		break;
	case PORTC_INDEX :
		local_port = PINC & 0X0F;
    1982:	e3 e3       	ldi	r30, 0x33	; 51
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 70       	andi	r24, 0x0F	; 15
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	05 c0       	rjmp	.+10     	; 0x1998 <DIO_readLogicLowNibble+0x7c>
		break;
	case PORTD_INDEX:
		local_port = PIND & 0X0F;
    198e:	e0 e3       	ldi	r30, 0x30	; 48
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8f 70       	andi	r24, 0x0F	; 15
    1996:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_port;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <DIO_initLowNibble>:
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the low nibble (use bits 3-0).
 * @param logic Initial logic levels for the low nibble (use bits 3-0).
 */
void DIO_initLowNibble(u8 port,u8 direction,u8 logic)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <DIO_initLowNibble+0x6>
    19ae:	0f 92       	push	r0
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
    19b8:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setDirectionLowNibble(port,direction);
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	6a 81       	ldd	r22, Y+2	; 0x02
    19be:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_setDirectionLowNibble>
	DIO_writeLogicLowNibble(port,logic);
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	6b 81       	ldd	r22, Y+3	; 0x03
    19c6:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_writeLogicLowNibble>
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <DIO_toggleLowNibble>:




void DIO_toggleLowNibble(u8 port)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <DIO_toggleLowNibble+0x6>
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	3b 83       	std	Y+3, r19	; 0x03
    19ec:	2a 83       	std	Y+2, r18	; 0x02
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	9b 81       	ldd	r25, Y+3	; 0x03
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	91 05       	cpc	r25, r1
    19f6:	f1 f0       	breq	.+60     	; 0x1a34 <DIO_toggleLowNibble+0x5e>
    19f8:	2a 81       	ldd	r18, Y+2	; 0x02
    19fa:	3b 81       	ldd	r19, Y+3	; 0x03
    19fc:	22 30       	cpi	r18, 0x02	; 2
    19fe:	31 05       	cpc	r19, r1
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <DIO_toggleLowNibble+0x36>
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	61 f0       	breq	.+24     	; 0x1a22 <DIO_toggleLowNibble+0x4c>
    1a0a:	2e c0       	rjmp	.+92     	; 0x1a68 <DIO_toggleLowNibble+0x92>
    1a0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	c1 f0       	breq	.+48     	; 0x1a46 <DIO_toggleLowNibble+0x70>
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	83 30       	cpi	r24, 0x03	; 3
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	e1 f0       	breq	.+56     	; 0x1a58 <DIO_toggleLowNibble+0x82>
    1a20:	23 c0       	rjmp	.+70     	; 0x1a68 <DIO_toggleLowNibble+0x92>
	{
	case PORTA_INDEX :
		PORTA ^= 0x0F;
    1a22:	ab e3       	ldi	r26, 0x3B	; 59
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	eb e3       	ldi	r30, 0x3B	; 59
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	90 81       	ld	r25, Z
    1a2c:	8f e0       	ldi	r24, 0x0F	; 15
    1a2e:	89 27       	eor	r24, r25
    1a30:	8c 93       	st	X, r24
    1a32:	1a c0       	rjmp	.+52     	; 0x1a68 <DIO_toggleLowNibble+0x92>
		break;
	case PORTB_INDEX :
		PORTB ^= 0x0F;
    1a34:	a8 e3       	ldi	r26, 0x38	; 56
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e8 e3       	ldi	r30, 0x38	; 56
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	90 81       	ld	r25, Z
    1a3e:	8f e0       	ldi	r24, 0x0F	; 15
    1a40:	89 27       	eor	r24, r25
    1a42:	8c 93       	st	X, r24
    1a44:	11 c0       	rjmp	.+34     	; 0x1a68 <DIO_toggleLowNibble+0x92>
		break;
	case PORTC_INDEX :
		PORTC ^= 0x0F;
    1a46:	a5 e3       	ldi	r26, 0x35	; 53
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e5 e3       	ldi	r30, 0x35	; 53
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	90 81       	ld	r25, Z
    1a50:	8f e0       	ldi	r24, 0x0F	; 15
    1a52:	89 27       	eor	r24, r25
    1a54:	8c 93       	st	X, r24
    1a56:	08 c0       	rjmp	.+16     	; 0x1a68 <DIO_toggleLowNibble+0x92>
		break;
	case PORTD_INDEX:
		PORTD ^= 0x0F;
    1a58:	a2 e3       	ldi	r26, 0x32	; 50
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	90 81       	ld	r25, Z
    1a62:	8f e0       	ldi	r24, 0x0F	; 15
    1a64:	89 27       	eor	r24, r25
    1a66:	8c 93       	st	X, r24
		break;
	}
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <SSD_init>:
}ssd_t; // with decoder
 */


void SSD_init(const ssd_t *ssd)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <SSD_init+0x6>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
#if(ENABLE_BIT == ENABLE_BIT_ON)
	DIO_initPin(&(ssd->enable));
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_initPin>
#endif
	if(ssd->connection_type == SSD_DIRECT_CONNECTION)
    1a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8e:	87 81       	ldd	r24, Z+7	; 0x07
    1a90:	88 23       	and	r24, r24
    1a92:	41 f4       	brne	.+16     	; 0x1aa4 <SSD_init+0x30>
	{
		DIO_initPort(ssd->port,0xFF,DIO_LOW); // NOTE : the last pin will be the enable
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	84 81       	ldd	r24, Z+4	; 0x04
    1a9a:	6f ef       	ldi	r22, 0xFF	; 255
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_initPort>
    1aa2:	1e c0       	rjmp	.+60     	; 0x1ae0 <SSD_init+0x6c>
	}
	else if(ssd->connection_type == SSD_DECODER_CONNECTION)
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	87 81       	ldd	r24, Z+7	; 0x07
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	c9 f4       	brne	.+50     	; 0x1ae0 <SSD_init+0x6c>
	{
		if(ssd->pins_location == SSD_HIGHER_NIBBLE)
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	85 81       	ldd	r24, Z+5	; 0x05
    1ab4:	88 23       	and	r24, r24
    1ab6:	41 f4       	brne	.+16     	; 0x1ac8 <SSD_init+0x54>
		{
			DIO_initHighNibble(ssd->port,0x0F,DIO_LOW);
    1ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aba:	fa 81       	ldd	r31, Y+2	; 0x02
    1abc:	84 81       	ldd	r24, Z+4	; 0x04
    1abe:	6f e0       	ldi	r22, 0x0F	; 15
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_initHighNibble>
    1ac6:	0c c0       	rjmp	.+24     	; 0x1ae0 <SSD_init+0x6c>
		}
		else if(ssd->pins_location == SSD_LOWER_NIBBLE)
    1ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aca:	fa 81       	ldd	r31, Y+2	; 0x02
    1acc:	85 81       	ldd	r24, Z+5	; 0x05
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	39 f4       	brne	.+14     	; 0x1ae0 <SSD_init+0x6c>
		{
			DIO_initLowNibble(ssd->port,0x0f,DIO_LOW);
    1ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad6:	84 81       	ldd	r24, Z+4	; 0x04
    1ad8:	6f e0       	ldi	r22, 0x0F	; 15
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_initLowNibble>
		}
	}
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <SSD_writeNumber>:

void SSD_writeNumber(const ssd_t *ssd,u8 number)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <SSD_writeNumber+0x6>
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	6b 83       	std	Y+3, r22	; 0x03
	if(ssd->connection_type == SSD_DIRECT_CONNECTION)
    1afc:	e9 81       	ldd	r30, Y+1	; 0x01
    1afe:	fa 81       	ldd	r31, Y+2	; 0x02
    1b00:	87 81       	ldd	r24, Z+7	; 0x07
    1b02:	88 23       	and	r24, r24
    1b04:	41 f5       	brne	.+80     	; 0x1b56 <SSD_writeNumber+0x6c>
	{
		if(ssd->ssd_common == SSD_COMMON_CATHOD)
    1b06:	e9 81       	ldd	r30, Y+1	; 0x01
    1b08:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0a:	86 81       	ldd	r24, Z+6	; 0x06
    1b0c:	88 23       	and	r24, r24
    1b0e:	79 f4       	brne	.+30     	; 0x1b2e <SSD_writeNumber+0x44>
		{
			DIO_writeLogicPort(ssd->port,common_cathod_numbers[number]);
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	24 81       	ldd	r18, Z+4	; 0x04
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e8 59       	subi	r30, 0x98	; 152
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	90 81       	ld	r25, Z
    1b24:	82 2f       	mov	r24, r18
    1b26:	69 2f       	mov	r22, r25
    1b28:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_writeLogicPort>
    1b2c:	30 c0       	rjmp	.+96     	; 0x1b8e <SSD_writeNumber+0xa4>
		}
		else if(ssd->ssd_common == SSD_COMMON_ANODE)
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	86 81       	ldd	r24, Z+6	; 0x06
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	59 f5       	brne	.+86     	; 0x1b8e <SSD_writeNumber+0xa4>
		{
			DIO_writeLogicPort(ssd->port,common_anode_numbers[number]);
    1b38:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3c:	24 81       	ldd	r18, Z+4	; 0x04
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	fc 01       	movw	r30, r24
    1b46:	ee 58       	subi	r30, 0x8E	; 142
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	90 81       	ld	r25, Z
    1b4c:	82 2f       	mov	r24, r18
    1b4e:	69 2f       	mov	r22, r25
    1b50:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_writeLogicPort>
    1b54:	1c c0       	rjmp	.+56     	; 0x1b8e <SSD_writeNumber+0xa4>
		}

	}
	else if(ssd->connection_type == SSD_DECODER_CONNECTION)
    1b56:	e9 81       	ldd	r30, Y+1	; 0x01
    1b58:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5a:	87 81       	ldd	r24, Z+7	; 0x07
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	b9 f4       	brne	.+46     	; 0x1b8e <SSD_writeNumber+0xa4>
	{
		if(ssd->pins_location == SSD_HIGHER_NIBBLE)
    1b60:	e9 81       	ldd	r30, Y+1	; 0x01
    1b62:	fa 81       	ldd	r31, Y+2	; 0x02
    1b64:	85 81       	ldd	r24, Z+5	; 0x05
    1b66:	88 23       	and	r24, r24
    1b68:	39 f4       	brne	.+14     	; 0x1b78 <SSD_writeNumber+0x8e>
		{
			DIO_writeLogicHighNibble(ssd->port,number);
    1b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6e:	84 81       	ldd	r24, Z+4	; 0x04
    1b70:	6b 81       	ldd	r22, Y+3	; 0x03
    1b72:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_writeLogicHighNibble>
    1b76:	0b c0       	rjmp	.+22     	; 0x1b8e <SSD_writeNumber+0xa4>
		}
		else if(ssd->pins_location == SSD_LOWER_NIBBLE)
    1b78:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7c:	85 81       	ldd	r24, Z+5	; 0x05
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	31 f4       	brne	.+12     	; 0x1b8e <SSD_writeNumber+0xa4>
		{
			DIO_writeLogicLowNibble(ssd->port,number);
    1b82:	e9 81       	ldd	r30, Y+1	; 0x01
    1b84:	fa 81       	ldd	r31, Y+2	; 0x02
    1b86:	84 81       	ldd	r24, Z+4	; 0x04
    1b88:	6b 81       	ldd	r22, Y+3	; 0x03
    1b8a:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_writeLogicLowNibble>
		}
	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <SSD_enable>:



void SSD_enable(const ssd_t *ssd)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <SSD_enable+0x6>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	if(ssd->ssd_common == SSD_COMMON_CATHOD)
    1ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    1baa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bac:	86 81       	ldd	r24, Z+6	; 0x06
    1bae:	88 23       	and	r24, r24
    1bb0:	31 f4       	brne	.+12     	; 0x1bbe <SSD_enable+0x24>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_LOW);
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
    1bbc:	0a c0       	rjmp	.+20     	; 0x1bd2 <SSD_enable+0x38>
	}
	else if(ssd->ssd_common == SSD_COMMON_ANODE)
    1bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc2:	86 81       	ldd	r24, Z+6	; 0x06
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	29 f4       	brne	.+10     	; 0x1bd2 <SSD_enable+0x38>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_HIGH);
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	9a 81       	ldd	r25, Y+2	; 0x02
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
	}
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <SSD_disable>:
void SSD_disable(const ssd_t *ssd)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <SSD_disable+0x6>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
	if(ssd->ssd_common == SSD_COMMON_CATHOD)
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	86 81       	ldd	r24, Z+6	; 0x06
    1bf0:	88 23       	and	r24, r24
    1bf2:	31 f4       	brne	.+12     	; 0x1c00 <SSD_disable+0x24>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_HIGH);
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
    1bfe:	0a c0       	rjmp	.+20     	; 0x1c14 <SSD_disable+0x38>
	}
	else if(ssd->ssd_common == SSD_COMMON_ANODE)
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	86 81       	ldd	r24, Z+6	; 0x06
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <SSD_disable+0x38>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_LOW);
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
	}
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <LED_init>:
/**
 * @brief Initialize a LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_init(const led_t *led)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <LED_init+0x6>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	DIO_setDirectonPin(&(led->pin),DIO_OUTPUT);
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	61 e0       	ldi	r22, 0x01	; 1
    1c32:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setDirectonPin>
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <LED_turnOn>:
/**
 * @brief Turn on the LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_turnOn(const led_t *led)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <LED_turnOn+0x6>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	if(led->connection_type == LED_ACTIVE_HIGH)
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	84 81       	ldd	r24, Z+4	; 0x04
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	31 f4       	brne	.+12     	; 0x1c64 <LED_turnOn+0x24>
	{
		DIO_writeLogicPin(&(led->pin),DIO_HIGH);
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
    1c62:	0a c0       	rjmp	.+20     	; 0x1c78 <LED_turnOn+0x38>
	}
	else if(led->connection_type == LED_ACTIVE_LOW)
    1c64:	e9 81       	ldd	r30, Y+1	; 0x01
    1c66:	fa 81       	ldd	r31, Y+2	; 0x02
    1c68:	84 81       	ldd	r24, Z+4	; 0x04
    1c6a:	88 23       	and	r24, r24
    1c6c:	29 f4       	brne	.+10     	; 0x1c78 <LED_turnOn+0x38>
	{
		DIO_writeLogicPin(&(led->pin),DIO_LOW);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
	}
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <LED_turnOff>:
/**
 * @brief Turn off the LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_turnOff(const led_t *led)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <LED_turnOff+0x6>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	if(led->connection_type == LED_ACTIVE_HIGH)
    1c90:	e9 81       	ldd	r30, Y+1	; 0x01
    1c92:	fa 81       	ldd	r31, Y+2	; 0x02
    1c94:	84 81       	ldd	r24, Z+4	; 0x04
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	31 f4       	brne	.+12     	; 0x1ca6 <LED_turnOff+0x24>
	{
		DIO_writeLogicPin(&(led->pin),DIO_LOW);
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
    1ca4:	0a c0       	rjmp	.+20     	; 0x1cba <LED_turnOff+0x38>
	}
	else if(led->connection_type == LED_ACTIVE_LOW)
    1ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    1caa:	84 81       	ldd	r24, Z+4	; 0x04
    1cac:	88 23       	and	r24, r24
    1cae:	29 f4       	brne	.+10     	; 0x1cba <LED_turnOff+0x38>
	{
		DIO_writeLogicPin(&(led->pin),DIO_HIGH);
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_writeLogicPin>
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <LED_toggle>:
/**
 * @brief Toggle the state of the LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_toggle(led_t *led)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <LED_toggle+0x6>
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	DIO_togglePin(&led->pin);
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_togglePin>
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <main>:
		.direction = DIO_INPUT
};
u8 reader = 0x00;
u8 counter = 0;
int main(void)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	2e 97       	sbiw	r28, 0x0e	; 14
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    SSD_init(&ssd1);
    1cf8:	8c e7       	ldi	r24, 0x7C	; 124
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <SSD_init>
    SSD_init(&ssd2);
    1d00:	84 e8       	ldi	r24, 0x84	; 132
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <SSD_init>

    while (1)
    {
    	reader = DIO_readLogicPin(&button);
    1d08:	8c e8       	ldi	r24, 0x8C	; 140
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_readLogicPin>
    1d10:	80 93 90 00 	sts	0x0090, r24
    	SSD_writeNumber(&ssd1,counter%10);
    1d14:	80 91 91 00 	lds	r24, 0x0091
    1d18:	9a e0       	ldi	r25, 0x0A	; 10
    1d1a:	69 2f       	mov	r22, r25
    1d1c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__udivmodqi4>
    1d20:	89 2f       	mov	r24, r25
    1d22:	28 2f       	mov	r18, r24
    1d24:	8c e7       	ldi	r24, 0x7C	; 124
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	62 2f       	mov	r22, r18
    1d2a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SSD_writeNumber>

    	SSD_writeNumber(&ssd2,(counter/10));
    1d2e:	80 91 91 00 	lds	r24, 0x0091
    1d32:	9a e0       	ldi	r25, 0x0A	; 10
    1d34:	69 2f       	mov	r22, r25
    1d36:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__udivmodqi4>
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	84 e8       	ldi	r24, 0x84	; 132
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	62 2f       	mov	r22, r18
    1d42:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SSD_writeNumber>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a8 e4       	ldi	r26, 0x48	; 72
    1d4c:	b3 e4       	ldi	r27, 0x43	; 67
    1d4e:	8b 87       	std	Y+11, r24	; 0x0b
    1d50:	9c 87       	std	Y+12, r25	; 0x0c
    1d52:	ad 87       	std	Y+13, r26	; 0x0d
    1d54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a e7       	ldi	r20, 0x7A	; 122
    1d64:	53 e4       	ldi	r21, 0x43	; 67
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8f 83       	std	Y+7, r24	; 0x07
    1d70:	98 87       	std	Y+8, r25	; 0x08
    1d72:	a9 87       	std	Y+9, r26	; 0x09
    1d74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <main+0xb4>
		__ticks = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	3f c0       	rjmp	.+126    	; 0x1e16 <main+0x132>
	else if (__tmp > 65535)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f5       	brge	.+82     	; 0x1e02 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <main+0x114>
    1dda:	89 e1       	ldi	r24, 0x19	; 25
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <main+0x102>
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <main+0xf6>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <main+0x13e>
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
    	if(reader == DIO_HIGH)
    1e2a:	80 91 90 00 	lds	r24, 0x0090
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <main+0x150>
    1e32:	6a cf       	rjmp	.-300    	; 0x1d08 <main+0x24>
    	{
    		counter++;
    1e34:	80 91 91 00 	lds	r24, 0x0091
    1e38:	8f 5f       	subi	r24, 0xFF	; 255
    1e3a:	80 93 91 00 	sts	0x0091, r24
    1e3e:	64 cf       	rjmp	.-312    	; 0x1d08 <main+0x24>

00001e40 <__udivmodqi4>:
    1e40:	99 1b       	sub	r25, r25
    1e42:	79 e0       	ldi	r23, 0x09	; 9
    1e44:	04 c0       	rjmp	.+8      	; 0x1e4e <__udivmodqi4_ep>

00001e46 <__udivmodqi4_loop>:
    1e46:	99 1f       	adc	r25, r25
    1e48:	96 17       	cp	r25, r22
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <__udivmodqi4_ep>
    1e4c:	96 1b       	sub	r25, r22

00001e4e <__udivmodqi4_ep>:
    1e4e:	88 1f       	adc	r24, r24
    1e50:	7a 95       	dec	r23
    1e52:	c9 f7       	brne	.-14     	; 0x1e46 <__udivmodqi4_loop>
    1e54:	80 95       	com	r24
    1e56:	08 95       	ret

00001e58 <__prologue_saves__>:
    1e58:	2f 92       	push	r2
    1e5a:	3f 92       	push	r3
    1e5c:	4f 92       	push	r4
    1e5e:	5f 92       	push	r5
    1e60:	6f 92       	push	r6
    1e62:	7f 92       	push	r7
    1e64:	8f 92       	push	r8
    1e66:	9f 92       	push	r9
    1e68:	af 92       	push	r10
    1e6a:	bf 92       	push	r11
    1e6c:	cf 92       	push	r12
    1e6e:	df 92       	push	r13
    1e70:	ef 92       	push	r14
    1e72:	ff 92       	push	r15
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	ca 1b       	sub	r28, r26
    1e82:	db 0b       	sbc	r29, r27
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	09 94       	ijmp

00001e90 <__epilogue_restores__>:
    1e90:	2a 88       	ldd	r2, Y+18	; 0x12
    1e92:	39 88       	ldd	r3, Y+17	; 0x11
    1e94:	48 88       	ldd	r4, Y+16	; 0x10
    1e96:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e98:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ea0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ea2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ea4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ea6:	df 80       	ldd	r13, Y+7	; 0x07
    1ea8:	ee 80       	ldd	r14, Y+6	; 0x06
    1eaa:	fd 80       	ldd	r15, Y+5	; 0x05
    1eac:	0c 81       	ldd	r16, Y+4	; 0x04
    1eae:	1b 81       	ldd	r17, Y+3	; 0x03
    1eb0:	aa 81       	ldd	r26, Y+2	; 0x02
    1eb2:	b9 81       	ldd	r27, Y+1	; 0x01
    1eb4:	ce 0f       	add	r28, r30
    1eb6:	d1 1d       	adc	r29, r1
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	ed 01       	movw	r28, r26
    1ec4:	08 95       	ret

00001ec6 <_exit>:
    1ec6:	f8 94       	cli

00001ec8 <__stop_program>:
    1ec8:	ff cf       	rjmp	.-2      	; 0x1ec8 <__stop_program>
