
application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00001e6e  00001ee2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000017c4  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f0a  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000045d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004716  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004886  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000064cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000073ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000082c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008d23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <main>
      7a:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_setDirectonPin>:
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 * @param direction   Desired direction for the GPIO pin (DIO_INPUT or DIO_OUTPUT).
 */
void DIO_setDirectonPin(const pin_t *pin,u8 direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
     b4e:	6b 83       	std	Y+3, r22	; 0x03
	if(direction == DIO_INPUT)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	88 23       	and	r24, r24
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_setDirectonPin+0x22>
     b56:	7e c0       	rjmp	.+252    	; 0xc54 <DIO_setDirectonPin+0x11e>
	{
		switch(pin->port)
     b58:	e9 81       	ldd	r30, Y+1	; 0x01
     b5a:	fa 81       	ldd	r31, Y+2	; 0x02
     b5c:	83 81       	ldd	r24, Z+3	; 0x03
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	3f 83       	std	Y+7, r19	; 0x07
     b64:	2e 83       	std	Y+6, r18	; 0x06
     b66:	8e 81       	ldd	r24, Y+6	; 0x06
     b68:	9f 81       	ldd	r25, Y+7	; 0x07
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	91 05       	cpc	r25, r1
     b6e:	69 f1       	breq	.+90     	; 0xbca <DIO_setDirectonPin+0x94>
     b70:	2e 81       	ldd	r18, Y+6	; 0x06
     b72:	3f 81       	ldd	r19, Y+7	; 0x07
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <DIO_setDirectonPin+0x4e>
     b7a:	8e 81       	ldd	r24, Y+6	; 0x06
     b7c:	9f 81       	ldd	r25, Y+7	; 0x07
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	69 f0       	breq	.+26     	; 0xb9c <DIO_setDirectonPin+0x66>
     b82:	e5 c0       	rjmp	.+458    	; 0xd4e <DIO_setDirectonPin+0x218>
     b84:	2e 81       	ldd	r18, Y+6	; 0x06
     b86:	3f 81       	ldd	r19, Y+7	; 0x07
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	a9 f1       	breq	.+106    	; 0xbf8 <DIO_setDirectonPin+0xc2>
     b8e:	8e 81       	ldd	r24, Y+6	; 0x06
     b90:	9f 81       	ldd	r25, Y+7	; 0x07
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	91 05       	cpc	r25, r1
     b96:	09 f4       	brne	.+2      	; 0xb9a <DIO_setDirectonPin+0x64>
     b98:	46 c0       	rjmp	.+140    	; 0xc26 <DIO_setDirectonPin+0xf0>
     b9a:	d9 c0       	rjmp	.+434    	; 0xd4e <DIO_setDirectonPin+0x218>
		{
		case PORTA_INDEX:
			CLEAR_BIT(DDRA,pin->pin);
     b9c:	aa e3       	ldi	r26, 0x3A	; 58
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ea e3       	ldi	r30, 0x3A	; 58
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	e9 81       	ldd	r30, Y+1	; 0x01
     baa:	fa 81       	ldd	r31, Y+2	; 0x02
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	02 2e       	mov	r0, r18
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <DIO_setDirectonPin+0x88>
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <DIO_setDirectonPin+0x84>
     bc2:	80 95       	com	r24
     bc4:	84 23       	and	r24, r20
     bc6:	8c 93       	st	X, r24
     bc8:	c2 c0       	rjmp	.+388    	; 0xd4e <DIO_setDirectonPin+0x218>
			break;
		case PORTB_INDEX:
			CLEAR_BIT(DDRB,pin->pin);
     bca:	a7 e3       	ldi	r26, 0x37	; 55
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e7 e3       	ldi	r30, 0x37	; 55
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	48 2f       	mov	r20, r24
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_setDirectonPin+0xb6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_setDirectonPin+0xb2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	ab c0       	rjmp	.+342    	; 0xd4e <DIO_setDirectonPin+0x218>
			break;
		case PORTC_INDEX:
			CLEAR_BIT(DDRC,pin->pin);
     bf8:	a4 e3       	ldi	r26, 0x34	; 52
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e4 e3       	ldi	r30, 0x34	; 52
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_setDirectonPin+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_setDirectonPin+0xe0>
     c1e:	80 95       	com	r24
     c20:	84 23       	and	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	94 c0       	rjmp	.+296    	; 0xd4e <DIO_setDirectonPin+0x218>
			break;
		case PORTD_INDEX:
			CLEAR_BIT(DDRD,pin->pin);
     c26:	a1 e3       	ldi	r26, 0x31	; 49
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e1 e3       	ldi	r30, 0x31	; 49
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	e9 81       	ldd	r30, Y+1	; 0x01
     c34:	fa 81       	ldd	r31, Y+2	; 0x02
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_setDirectonPin+0x112>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_setDirectonPin+0x10e>
     c4c:	80 95       	com	r24
     c4e:	84 23       	and	r24, r20
     c50:	8c 93       	st	X, r24
     c52:	7d c0       	rjmp	.+250    	; 0xd4e <DIO_setDirectonPin+0x218>
			break;
		}
	}
	else if(direction == DIO_OUTPUT)
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	09 f0       	breq	.+2      	; 0xc5c <DIO_setDirectonPin+0x126>
     c5a:	79 c0       	rjmp	.+242    	; 0xd4e <DIO_setDirectonPin+0x218>
	{
		switch(pin->port)
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	83 81       	ldd	r24, Z+3	; 0x03
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	3d 83       	std	Y+5, r19	; 0x05
     c68:	2c 83       	std	Y+4, r18	; 0x04
     c6a:	8c 81       	ldd	r24, Y+4	; 0x04
     c6c:	9d 81       	ldd	r25, Y+5	; 0x05
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	91 05       	cpc	r25, r1
     c72:	61 f1       	breq	.+88     	; 0xccc <DIO_setDirectonPin+0x196>
     c74:	2c 81       	ldd	r18, Y+4	; 0x04
     c76:	3d 81       	ldd	r19, Y+5	; 0x05
     c78:	22 30       	cpi	r18, 0x02	; 2
     c7a:	31 05       	cpc	r19, r1
     c7c:	2c f4       	brge	.+10     	; 0xc88 <DIO_setDirectonPin+0x152>
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	69 f0       	breq	.+26     	; 0xca0 <DIO_setDirectonPin+0x16a>
     c86:	63 c0       	rjmp	.+198    	; 0xd4e <DIO_setDirectonPin+0x218>
     c88:	2c 81       	ldd	r18, Y+4	; 0x04
     c8a:	3d 81       	ldd	r19, Y+5	; 0x05
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	99 f1       	breq	.+102    	; 0xcf8 <DIO_setDirectonPin+0x1c2>
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	9d 81       	ldd	r25, Y+5	; 0x05
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	91 05       	cpc	r25, r1
     c9a:	09 f4       	brne	.+2      	; 0xc9e <DIO_setDirectonPin+0x168>
     c9c:	43 c0       	rjmp	.+134    	; 0xd24 <DIO_setDirectonPin+0x1ee>
     c9e:	57 c0       	rjmp	.+174    	; 0xd4e <DIO_setDirectonPin+0x218>
		{
		case PORTA_INDEX:
			SET_BIT(DDRA,pin->pin);
     ca0:	aa e3       	ldi	r26, 0x3A	; 58
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ea e3       	ldi	r30, 0x3A	; 58
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	48 2f       	mov	r20, r24
     cac:	e9 81       	ldd	r30, Y+1	; 0x01
     cae:	fa 81       	ldd	r31, Y+2	; 0x02
     cb0:	82 81       	ldd	r24, Z+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_setDirectonPin+0x18c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_setDirectonPin+0x188>
     cc6:	84 2b       	or	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	41 c0       	rjmp	.+130    	; 0xd4e <DIO_setDirectonPin+0x218>
			break;
		case PORTB_INDEX:
			SET_BIT(DDRB,pin->pin);
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	e9 81       	ldd	r30, Y+1	; 0x01
     cda:	fa 81       	ldd	r31, Y+2	; 0x02
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_setDirectonPin+0x1b8>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_setDirectonPin+0x1b4>
     cf2:	84 2b       	or	r24, r20
     cf4:	8c 93       	st	X, r24
     cf6:	2b c0       	rjmp	.+86     	; 0xd4e <DIO_setDirectonPin+0x218>
			break;
		case PORTC_INDEX:
			SET_BIT(DDRC,pin->pin);
     cf8:	a4 e3       	ldi	r26, 0x34	; 52
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e4 e3       	ldi	r30, 0x34	; 52
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	e9 81       	ldd	r30, Y+1	; 0x01
     d06:	fa 81       	ldd	r31, Y+2	; 0x02
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_setDirectonPin+0x1e4>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_setDirectonPin+0x1e0>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	15 c0       	rjmp	.+42     	; 0xd4e <DIO_setDirectonPin+0x218>
			break;
		case PORTD_INDEX:
			SET_BIT(DDRD,pin->pin);
     d24:	a1 e3       	ldi	r26, 0x31	; 49
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e1 e3       	ldi	r30, 0x31	; 49
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	e9 81       	ldd	r30, Y+1	; 0x01
     d32:	fa 81       	ldd	r31, Y+2	; 0x02
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_setDirectonPin+0x210>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_setDirectonPin+0x20c>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
			break;
		}
	}
}
     d4e:	27 96       	adiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <DIO_writeLogicPin>:
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 * @param level   Desired logic level for the GPIO pin (DIO_LOW or DIO_HIGH).
 */
void DIO_writeLogicPin(const pin_t *pin,u8 level)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	27 97       	sbiw	r28, 0x07	; 7
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	6b 83       	std	Y+3, r22	; 0x03
	if(level == DIO_LOW)
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	88 23       	and	r24, r24
     d7e:	09 f0       	breq	.+2      	; 0xd82 <DIO_writeLogicPin+0x22>
     d80:	7e c0       	rjmp	.+252    	; 0xe7e <DIO_writeLogicPin+0x11e>
		{
			switch(pin->port)
     d82:	e9 81       	ldd	r30, Y+1	; 0x01
     d84:	fa 81       	ldd	r31, Y+2	; 0x02
     d86:	83 81       	ldd	r24, Z+3	; 0x03
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	3f 83       	std	Y+7, r19	; 0x07
     d8e:	2e 83       	std	Y+6, r18	; 0x06
     d90:	8e 81       	ldd	r24, Y+6	; 0x06
     d92:	9f 81       	ldd	r25, Y+7	; 0x07
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	91 05       	cpc	r25, r1
     d98:	69 f1       	breq	.+90     	; 0xdf4 <DIO_writeLogicPin+0x94>
     d9a:	2e 81       	ldd	r18, Y+6	; 0x06
     d9c:	3f 81       	ldd	r19, Y+7	; 0x07
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	31 05       	cpc	r19, r1
     da2:	2c f4       	brge	.+10     	; 0xdae <DIO_writeLogicPin+0x4e>
     da4:	8e 81       	ldd	r24, Y+6	; 0x06
     da6:	9f 81       	ldd	r25, Y+7	; 0x07
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	69 f0       	breq	.+26     	; 0xdc6 <DIO_writeLogicPin+0x66>
     dac:	e5 c0       	rjmp	.+458    	; 0xf78 <DIO_writeLogicPin+0x218>
     dae:	2e 81       	ldd	r18, Y+6	; 0x06
     db0:	3f 81       	ldd	r19, Y+7	; 0x07
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	a9 f1       	breq	.+106    	; 0xe22 <DIO_writeLogicPin+0xc2>
     db8:	8e 81       	ldd	r24, Y+6	; 0x06
     dba:	9f 81       	ldd	r25, Y+7	; 0x07
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	91 05       	cpc	r25, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <DIO_writeLogicPin+0x64>
     dc2:	46 c0       	rjmp	.+140    	; 0xe50 <DIO_writeLogicPin+0xf0>
     dc4:	d9 c0       	rjmp	.+434    	; 0xf78 <DIO_writeLogicPin+0x218>
			{
			case PORTA_INDEX:
				CLEAR_BIT(PORTA,pin->pin);
     dc6:	ab e3       	ldi	r26, 0x3B	; 59
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	eb e3       	ldi	r30, 0x3B	; 59
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	e9 81       	ldd	r30, Y+1	; 0x01
     dd4:	fa 81       	ldd	r31, Y+2	; 0x02
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_writeLogicPin+0x88>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_writeLogicPin+0x84>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	c2 c0       	rjmp	.+388    	; 0xf78 <DIO_writeLogicPin+0x218>
				break;
			case PORTB_INDEX:
				CLEAR_BIT(PORTB,pin->pin);
     df4:	a8 e3       	ldi	r26, 0x38	; 56
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e8 e3       	ldi	r30, 0x38	; 56
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	e9 81       	ldd	r30, Y+1	; 0x01
     e02:	fa 81       	ldd	r31, Y+2	; 0x02
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_writeLogicPin+0xb6>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_writeLogicPin+0xb2>
     e1a:	80 95       	com	r24
     e1c:	84 23       	and	r24, r20
     e1e:	8c 93       	st	X, r24
     e20:	ab c0       	rjmp	.+342    	; 0xf78 <DIO_writeLogicPin+0x218>
				break;
			case PORTC_INDEX:
				CLEAR_BIT(PORTC,pin->pin);
     e22:	a5 e3       	ldi	r26, 0x35	; 53
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e3       	ldi	r30, 0x35	; 53
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	e9 81       	ldd	r30, Y+1	; 0x01
     e30:	fa 81       	ldd	r31, Y+2	; 0x02
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_writeLogicPin+0xe4>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_writeLogicPin+0xe0>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	94 c0       	rjmp	.+296    	; 0xf78 <DIO_writeLogicPin+0x218>
				break;
			case PORTD_INDEX:
				CLEAR_BIT(PORTD,pin->pin);
     e50:	a2 e3       	ldi	r26, 0x32	; 50
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e2 e3       	ldi	r30, 0x32	; 50
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	e9 81       	ldd	r30, Y+1	; 0x01
     e5e:	fa 81       	ldd	r31, Y+2	; 0x02
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_writeLogicPin+0x112>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_writeLogicPin+0x10e>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	7d c0       	rjmp	.+250    	; 0xf78 <DIO_writeLogicPin+0x218>
				break;
			}
		}
		else if(level == DIO_HIGH)
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	09 f0       	breq	.+2      	; 0xe86 <DIO_writeLogicPin+0x126>
     e84:	79 c0       	rjmp	.+242    	; 0xf78 <DIO_writeLogicPin+0x218>
		{
			switch(pin->port)
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	83 81       	ldd	r24, Z+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3d 83       	std	Y+5, r19	; 0x05
     e92:	2c 83       	std	Y+4, r18	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	61 f1       	breq	.+88     	; 0xef6 <DIO_writeLogicPin+0x196>
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	3d 81       	ldd	r19, Y+5	; 0x05
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <DIO_writeLogicPin+0x152>
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	69 f0       	breq	.+26     	; 0xeca <DIO_writeLogicPin+0x16a>
     eb0:	63 c0       	rjmp	.+198    	; 0xf78 <DIO_writeLogicPin+0x218>
     eb2:	2c 81       	ldd	r18, Y+4	; 0x04
     eb4:	3d 81       	ldd	r19, Y+5	; 0x05
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	99 f1       	breq	.+102    	; 0xf22 <DIO_writeLogicPin+0x1c2>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	91 05       	cpc	r25, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <DIO_writeLogicPin+0x168>
     ec6:	43 c0       	rjmp	.+134    	; 0xf4e <DIO_writeLogicPin+0x1ee>
     ec8:	57 c0       	rjmp	.+174    	; 0xf78 <DIO_writeLogicPin+0x218>
			{
			case PORTA_INDEX:
				SET_BIT(PORTA,pin->pin);
     eca:	ab e3       	ldi	r26, 0x3B	; 59
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	e9 81       	ldd	r30, Y+1	; 0x01
     ed8:	fa 81       	ldd	r31, Y+2	; 0x02
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_writeLogicPin+0x18c>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_writeLogicPin+0x188>
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	41 c0       	rjmp	.+130    	; 0xf78 <DIO_writeLogicPin+0x218>
				break;
			case PORTB_INDEX:
				SET_BIT(PORTB,pin->pin);
     ef6:	a8 e3       	ldi	r26, 0x38	; 56
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e8 e3       	ldi	r30, 0x38	; 56
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	e9 81       	ldd	r30, Y+1	; 0x01
     f04:	fa 81       	ldd	r31, Y+2	; 0x02
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_writeLogicPin+0x1b8>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_writeLogicPin+0x1b4>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	2b c0       	rjmp	.+86     	; 0xf78 <DIO_writeLogicPin+0x218>
				break;
			case PORTC_INDEX:
				SET_BIT(PORTC,pin->pin);
     f22:	a5 e3       	ldi	r26, 0x35	; 53
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e5 e3       	ldi	r30, 0x35	; 53
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	e9 81       	ldd	r30, Y+1	; 0x01
     f30:	fa 81       	ldd	r31, Y+2	; 0x02
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_writeLogicPin+0x1e4>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_writeLogicPin+0x1e0>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	15 c0       	rjmp	.+42     	; 0xf78 <DIO_writeLogicPin+0x218>
				break;
			case PORTD_INDEX:
				SET_BIT(PORTD,pin->pin);
     f4e:	a2 e3       	ldi	r26, 0x32	; 50
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e2 e3       	ldi	r30, 0x32	; 50
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	e9 81       	ldd	r30, Y+1	; 0x01
     f5c:	fa 81       	ldd	r31, Y+2	; 0x02
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_writeLogicPin+0x210>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_writeLogicPin+0x20c>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
				break;
			}
		}
}
     f78:	27 96       	adiw	r28, 0x07	; 7
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <DIO_readLogicPin>:
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 * @return u8   Logic level of the GPIO pin (DIO_LOW or DIO_HIGH).
 */
u8 DIO_readLogicPin(const pin_t *pin)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <DIO_readLogicPin+0x6>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <DIO_readLogicPin+0x8>
     f92:	0f 92       	push	r0
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9b 83       	std	Y+3, r25	; 0x03
     f9a:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_pin = 0x00;
     f9c:	19 82       	std	Y+1, r1	; 0x01
	switch(pin->port)
     f9e:	ea 81       	ldd	r30, Y+2	; 0x02
     fa0:	fb 81       	ldd	r31, Y+3	; 0x03
     fa2:	83 81       	ldd	r24, Z+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3d 83       	std	Y+5, r19	; 0x05
     faa:	2c 83       	std	Y+4, r18	; 0x04
     fac:	4c 81       	ldd	r20, Y+4	; 0x04
     fae:	5d 81       	ldd	r21, Y+5	; 0x05
     fb0:	41 30       	cpi	r20, 0x01	; 1
     fb2:	51 05       	cpc	r21, r1
     fb4:	59 f1       	breq	.+86     	; 0x100c <DIO_readLogicPin+0x82>
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	91 05       	cpc	r25, r1
     fbe:	34 f4       	brge	.+12     	; 0xfcc <DIO_readLogicPin+0x42>
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	69 f0       	breq	.+26     	; 0xfe4 <DIO_readLogicPin+0x5a>
     fca:	5b c0       	rjmp	.+182    	; 0x1082 <DIO_readLogicPin+0xf8>
     fcc:	4c 81       	ldd	r20, Y+4	; 0x04
     fce:	5d 81       	ldd	r21, Y+5	; 0x05
     fd0:	42 30       	cpi	r20, 0x02	; 2
     fd2:	51 05       	cpc	r21, r1
     fd4:	79 f1       	breq	.+94     	; 0x1034 <DIO_readLogicPin+0xaa>
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <DIO_readLogicPin+0x58>
     fe0:	3d c0       	rjmp	.+122    	; 0x105c <DIO_readLogicPin+0xd2>
     fe2:	4f c0       	rjmp	.+158    	; 0x1082 <DIO_readLogicPin+0xf8>
	{
	case PORTA_INDEX:
		local_pin = GET_BIT(PINA,pin->pin);
     fe4:	e9 e3       	ldi	r30, 0x39	; 57
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	ea 81       	ldd	r30, Y+2	; 0x02
     ff0:	fb 81       	ldd	r31, Y+3	; 0x03
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_readLogicPin+0x76>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_readLogicPin+0x72>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	3b c0       	rjmp	.+118    	; 0x1082 <DIO_readLogicPin+0xf8>
		break;
	case PORTB_INDEX:
		local_pin = GET_BIT(PINB,pin->pin);
    100c:	e6 e3       	ldi	r30, 0x36	; 54
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	ea 81       	ldd	r30, Y+2	; 0x02
    1018:	fb 81       	ldd	r31, Y+3	; 0x03
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_readLogicPin+0x9e>
    1024:	55 95       	asr	r21
    1026:	47 95       	ror	r20
    1028:	8a 95       	dec	r24
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_readLogicPin+0x9a>
    102c:	ca 01       	movw	r24, r20
    102e:	81 70       	andi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	27 c0       	rjmp	.+78     	; 0x1082 <DIO_readLogicPin+0xf8>
		break;
	case PORTC_INDEX:
		local_pin = GET_BIT(PINC,pin->pin);
    1034:	e3 e3       	ldi	r30, 0x33	; 51
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	ea 81       	ldd	r30, Y+2	; 0x02
    1040:	fb 81       	ldd	r31, Y+3	; 0x03
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_readLogicPin+0xc6>
    104c:	55 95       	asr	r21
    104e:	47 95       	ror	r20
    1050:	8a 95       	dec	r24
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_readLogicPin+0xc2>
    1054:	ca 01       	movw	r24, r20
    1056:	81 70       	andi	r24, 0x01	; 1
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <DIO_readLogicPin+0xf8>
		break;
	case PORTD_INDEX:
		local_pin = GET_BIT(PIND,pin->pin);
    105c:	e0 e3       	ldi	r30, 0x30	; 48
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	ea 81       	ldd	r30, Y+2	; 0x02
    1068:	fb 81       	ldd	r31, Y+3	; 0x03
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_readLogicPin+0xee>
    1074:	55 95       	asr	r21
    1076:	47 95       	ror	r20
    1078:	8a 95       	dec	r24
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_readLogicPin+0xea>
    107c:	ca 01       	movw	r24, r20
    107e:	81 70       	andi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_pin;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <DIO_initPin>:
 * @brief Initialize a specific GPIO pin based on the configuration in the pin_t structure.
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin with its configuration.
 */
void DIO_initPin(const pin_t *pin)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <DIO_initPin+0x6>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
	DIO_setDirectonPin(pin,pin->direction);
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	20 81       	ld	r18, Z
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	62 2f       	mov	r22, r18
    10ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setDirectonPin>
	DIO_writeLogicPin(pin,pin->logic);
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	21 81       	ldd	r18, Z+1	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	62 2f       	mov	r22, r18
    10be:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <DIO_togglePin>:
 * @brief Toggle the logic level of a specific GPIO pin.
 *
 * @param pin   Pointer to the pin_t structure representing the GPIO pin.
 */
void DIO_togglePin(pin_t *pin)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <DIO_togglePin+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <DIO_togglePin+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
	switch(pin->port)
    10dc:	e9 81       	ldd	r30, Y+1	; 0x01
    10de:	fa 81       	ldd	r31, Y+2	; 0x02
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3c 83       	std	Y+4, r19	; 0x04
    10e8:	2b 83       	std	Y+3, r18	; 0x03
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	91 05       	cpc	r25, r1
    10f2:	61 f1       	breq	.+88     	; 0x114c <DIO_togglePin+0x80>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f4       	brge	.+10     	; 0x1108 <DIO_togglePin+0x3c>
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	69 f0       	breq	.+26     	; 0x1120 <DIO_togglePin+0x54>
    1106:	63 c0       	rjmp	.+198    	; 0x11ce <DIO_togglePin+0x102>
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	3c 81       	ldd	r19, Y+4	; 0x04
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	99 f1       	breq	.+102    	; 0x1178 <DIO_togglePin+0xac>
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_togglePin+0x52>
    111c:	43 c0       	rjmp	.+134    	; 0x11a4 <DIO_togglePin+0xd8>
    111e:	57 c0       	rjmp	.+174    	; 0x11ce <DIO_togglePin+0x102>
	{
	case PORTA_INDEX :
		TOGGLE_BIT(PORTA,pin->pin);
    1120:	ab e3       	ldi	r26, 0x3B	; 59
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	eb e3       	ldi	r30, 0x3B	; 59
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	e9 81       	ldd	r30, Y+1	; 0x01
    112e:	fa 81       	ldd	r31, Y+2	; 0x02
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_togglePin+0x76>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_togglePin+0x72>
    1146:	84 27       	eor	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	41 c0       	rjmp	.+130    	; 0x11ce <DIO_togglePin+0x102>
		break;
	case PORTB_INDEX :
		TOGGLE_BIT(PORTB,pin->pin);
    114c:	a8 e3       	ldi	r26, 0x38	; 56
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e8 e3       	ldi	r30, 0x38	; 56
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_togglePin+0xa2>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_togglePin+0x9e>
    1172:	84 27       	eor	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	2b c0       	rjmp	.+86     	; 0x11ce <DIO_togglePin+0x102>
		break;
	case PORTC_INDEX :
			TOGGLE_BIT(PORTC,pin->pin);
    1178:	a5 e3       	ldi	r26, 0x35	; 53
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e3       	ldi	r30, 0x35	; 53
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	82 81       	ldd	r24, Z+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_togglePin+0xce>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_togglePin+0xca>
    119e:	84 27       	eor	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	15 c0       	rjmp	.+42     	; 0x11ce <DIO_togglePin+0x102>
			break;
	case PORTD_INDEX :
			TOGGLE_BIT(PORTD,pin->pin);
    11a4:	a2 e3       	ldi	r26, 0x32	; 50
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	e9 81       	ldd	r30, Y+1	; 0x01
    11b2:	fa 81       	ldd	r31, Y+2	; 0x02
    11b4:	82 81       	ldd	r24, Z+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_togglePin+0xfa>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_togglePin+0xf6>
    11ca:	84 27       	eor	r24, r20
    11cc:	8c 93       	st	X, r24
			break;
	}

}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <DIO_setDirectonPort>:
 *
 * @param port       The GPIO port to configure (e.g., PORTA_INDEX).
 * @param direction  Desired direction for the GPIO port (DIO_INPUT or DIO_OUTPUT).
 */
void DIO_setDirectonPort(u8 port,u8 direction)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <DIO_setDirectonPort+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_setDirectonPort+0x8>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	d1 f0       	breq	.+52     	; 0x1234 <DIO_setDirectonPort+0x58>
    1200:	2b 81       	ldd	r18, Y+3	; 0x03
    1202:	3c 81       	ldd	r19, Y+4	; 0x04
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <DIO_setDirectonPort+0x38>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	61 f0       	breq	.+24     	; 0x122a <DIO_setDirectonPort+0x4e>
    1212:	1e c0       	rjmp	.+60     	; 0x1250 <DIO_setDirectonPort+0x74>
    1214:	2b 81       	ldd	r18, Y+3	; 0x03
    1216:	3c 81       	ldd	r19, Y+4	; 0x04
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	81 f0       	breq	.+32     	; 0x123e <DIO_setDirectonPort+0x62>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <DIO_setDirectonPort+0x6c>
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <DIO_setDirectonPort+0x74>
	{
	case PORTA_INDEX :
		DDRA = direction;
    122a:	ea e3       	ldi	r30, 0x3A	; 58
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	80 83       	st	Z, r24
    1232:	0e c0       	rjmp	.+28     	; 0x1250 <DIO_setDirectonPort+0x74>
		break;
	case PORTB_INDEX :
		DDRB = direction;
    1234:	e7 e3       	ldi	r30, 0x37	; 55
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	80 83       	st	Z, r24
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <DIO_setDirectonPort+0x74>
		break;
	case PORTC_INDEX :
		DDRC = direction;
    123e:	e4 e3       	ldi	r30, 0x34	; 52
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 83       	st	Z, r24
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <DIO_setDirectonPort+0x74>
		break;
	case PORTD_INDEX:
		DDRD = direction;
    1248:	e1 e3       	ldi	r30, 0x31	; 49
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 83       	st	Z, r24
		break;
	}
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <DIO_writeLogicPort>:
 *
 * @param port   The GPIO port to write to (e.g., PORTA_INDEX).
 * @param level  Desired logic level for the GPIO port (DIO_LOW or DIO_HIGH).
 */
void DIO_writeLogicPort(u8 port,u8 level)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <DIO_writeLogicPort+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <DIO_writeLogicPort+0x8>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3c 83       	std	Y+4, r19	; 0x04
    1276:	2b 83       	std	Y+3, r18	; 0x03
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	d1 f0       	breq	.+52     	; 0x12b6 <DIO_writeLogicPort+0x58>
    1282:	2b 81       	ldd	r18, Y+3	; 0x03
    1284:	3c 81       	ldd	r19, Y+4	; 0x04
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <DIO_writeLogicPort+0x38>
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	61 f0       	breq	.+24     	; 0x12ac <DIO_writeLogicPort+0x4e>
    1294:	1e c0       	rjmp	.+60     	; 0x12d2 <DIO_writeLogicPort+0x74>
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <DIO_writeLogicPort+0x62>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	81 f0       	breq	.+32     	; 0x12ca <DIO_writeLogicPort+0x6c>
    12aa:	13 c0       	rjmp	.+38     	; 0x12d2 <DIO_writeLogicPort+0x74>
		{
		case PORTA_INDEX :
			PORTA = level;
    12ac:	eb e3       	ldi	r30, 0x3B	; 59
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
    12b4:	0e c0       	rjmp	.+28     	; 0x12d2 <DIO_writeLogicPort+0x74>
			break;
		case PORTB_INDEX :
			PORTB = level;
    12b6:	e8 e3       	ldi	r30, 0x38	; 56
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	80 83       	st	Z, r24
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <DIO_writeLogicPort+0x74>
			break;
		case PORTC_INDEX :
			PORTC = level;
    12c0:	e5 e3       	ldi	r30, 0x35	; 53
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <DIO_writeLogicPort+0x74>
			break;
		case PORTD_INDEX:
			PORTD = level;
    12ca:	e2 e3       	ldi	r30, 0x32	; 50
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	80 83       	st	Z, r24
			break;
		}
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_readLogicPort>:
 *
 * @param port   The GPIO port to read from (e.g., PORTA_INDEX).
 * @return u8    Logic levels of the GPIO port as a byte.
 */
u8 DIO_readLogicPort(u8 port)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_readLogicPort+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_readLogicPort+0x8>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_port = 0x00;
    12ee:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	d1 f0       	breq	.+52     	; 0x1338 <DIO_readLogicPort+0x58>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <DIO_readLogicPort+0x38>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <DIO_readLogicPort+0x4e>
    1316:	1e c0       	rjmp	.+60     	; 0x1354 <DIO_readLogicPort+0x74>
    1318:	2b 81       	ldd	r18, Y+3	; 0x03
    131a:	3c 81       	ldd	r19, Y+4	; 0x04
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <DIO_readLogicPort+0x62>
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <DIO_readLogicPort+0x6c>
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <DIO_readLogicPort+0x74>
	{
	case PORTA_INDEX :
		local_port = PINA;
    132e:	e9 e3       	ldi	r30, 0x39	; 57
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <DIO_readLogicPort+0x74>
		break;
	case PORTB_INDEX :
		local_port = PINB;
    1338:	e6 e3       	ldi	r30, 0x36	; 54
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <DIO_readLogicPort+0x74>
		break;
	case PORTC_INDEX :
		local_port = PINC;
    1342:	e3 e3       	ldi	r30, 0x33	; 51
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <DIO_readLogicPort+0x74>
		break;
	case PORTD_INDEX:
		local_port = PIND;
    134c:	e0 e3       	ldi	r30, 0x30	; 48
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_port;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <DIO_initPort>:
 * @param port       The GPIO port to initialize (e.g., PORTA_INDEX).
 * @param direction  Desired direction for the GPIO port (DIO_INPUT or DIO_OUTPUT).
 * @param logic      Initial logic levels for the GPIO port (DIO_LOW or DIO_HIGH).
 */
void DIO_initPort(u8 port,u8 direction,u8 logic)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <DIO_initPort+0x6>
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	6a 83       	std	Y+2, r22	; 0x02
    1374:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setDirectonPort(port,direction);
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	6a 81       	ldd	r22, Y+2	; 0x02
    137a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_setDirectonPort>
	DIO_writeLogicPort(port,logic);
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	6b 81       	ldd	r22, Y+3	; 0x03
    1382:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_writeLogicPort>
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_togglePort>:
 * @brief Toggle the logic levels of all pins in a specified GPIO port.
 *
 * @param port   The GPIO port to toggle (e.g., PORTA_INDEX).
 */
void DIO_togglePort(u8 port)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_togglePort+0x6>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3b 83       	std	Y+3, r19	; 0x03
    13a8:	2a 83       	std	Y+2, r18	; 0x02
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	e9 f0       	breq	.+58     	; 0x13ee <DIO_togglePort+0x5c>
    13b4:	2a 81       	ldd	r18, Y+2	; 0x02
    13b6:	3b 81       	ldd	r19, Y+3	; 0x03
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <DIO_togglePort+0x36>
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <DIO_togglePort+0x4c>
    13c6:	2a c0       	rjmp	.+84     	; 0x141c <DIO_togglePort+0x8a>
    13c8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ca:	3b 81       	ldd	r19, Y+3	; 0x03
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <DIO_togglePort+0x6c>
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	c9 f0       	breq	.+50     	; 0x140e <DIO_togglePort+0x7c>
    13dc:	1f c0       	rjmp	.+62     	; 0x141c <DIO_togglePort+0x8a>
	{
	case PORTA_INDEX :
		PORTA ^= 0xFF;
    13de:	ab e3       	ldi	r26, 0x3B	; 59
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 95       	com	r24
    13ea:	8c 93       	st	X, r24
    13ec:	17 c0       	rjmp	.+46     	; 0x141c <DIO_togglePort+0x8a>
		break;
	case PORTB_INDEX :
		PORTB ^= 0xFF;
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 95       	com	r24
    13fa:	8c 93       	st	X, r24
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <DIO_togglePort+0x8a>
		break;
	case PORTC_INDEX :
		PORTC ^= 0xFF;
    13fe:	a5 e3       	ldi	r26, 0x35	; 53
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e3       	ldi	r30, 0x35	; 53
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 95       	com	r24
    140a:	8c 93       	st	X, r24
    140c:	07 c0       	rjmp	.+14     	; 0x141c <DIO_togglePort+0x8a>
		break;
	case PORTD_INDEX:
		PORTD ^= 0xFF;
    140e:	a2 e3       	ldi	r26, 0x32	; 50
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e2 e3       	ldi	r30, 0x32	; 50
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 95       	com	r24
    141a:	8c 93       	st	X, r24
		break;
	}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <DIO_setDirectionHighNibble>:
 * @brief Sets the direction of the high nibble (bits 7-4) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the high nibble (use bits 7-4).
 */
void DIO_setDirectionHighNibble(u8 port,u8 direction)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_setDirectionHighNibble+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_setDirectionHighNibble+0x8>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	6a 83       	std	Y+2, r22	; 0x02
	direction <<= 4; // 1100 0000
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	82 95       	swap	r24
    143c:	80 7f       	andi	r24, 0xF0	; 240
    143e:	8a 83       	std	Y+2, r24	; 0x02
	switch(port)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3c 83       	std	Y+4, r19	; 0x04
    1448:	2b 83       	std	Y+3, r18	; 0x03
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	29 f1       	breq	.+74     	; 0x149e <DIO_setDirectionHighNibble+0x76>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	2c f4       	brge	.+10     	; 0x1468 <DIO_setDirectionHighNibble+0x40>
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	61 f0       	breq	.+24     	; 0x147e <DIO_setDirectionHighNibble+0x56>
    1466:	4a c0       	rjmp	.+148    	; 0x14fc <DIO_setDirectionHighNibble+0xd4>
    1468:	2b 81       	ldd	r18, Y+3	; 0x03
    146a:	3c 81       	ldd	r19, Y+4	; 0x04
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	31 f1       	breq	.+76     	; 0x14be <DIO_setDirectionHighNibble+0x96>
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	89 f1       	breq	.+98     	; 0x14de <DIO_setDirectionHighNibble+0xb6>
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <DIO_setDirectionHighNibble+0xd4>
	{
	case PORTA_INDEX :
		DDRA &= 0x0F; // 0000 0101
    147e:	aa e3       	ldi	r26, 0x3A	; 58
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ea e3       	ldi	r30, 0x3A	; 58
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8f 70       	andi	r24, 0x0F	; 15
    148a:	8c 93       	st	X, r24
		DDRA |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    148c:	aa e3       	ldi	r26, 0x3A	; 58
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ea e3       	ldi	r30, 0x3A	; 58
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	90 81       	ld	r25, Z
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	89 2b       	or	r24, r25
    149a:	8c 93       	st	X, r24
    149c:	2f c0       	rjmp	.+94     	; 0x14fc <DIO_setDirectionHighNibble+0xd4>
		break;
	case PORTB_INDEX :
		DDRB &= 0x0F; // 0000 0101
    149e:	a7 e3       	ldi	r26, 0x37	; 55
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e7 e3       	ldi	r30, 0x37	; 55
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 70       	andi	r24, 0x0F	; 15
    14aa:	8c 93       	st	X, r24
		DDRB |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	90 81       	ld	r25, Z
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	89 2b       	or	r24, r25
    14ba:	8c 93       	st	X, r24
    14bc:	1f c0       	rjmp	.+62     	; 0x14fc <DIO_setDirectionHighNibble+0xd4>
		break;
	case PORTC_INDEX :
		DDRC &= 0x0F; // 0000 0101
    14be:	a4 e3       	ldi	r26, 0x34	; 52
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e4 e3       	ldi	r30, 0x34	; 52
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8f 70       	andi	r24, 0x0F	; 15
    14ca:	8c 93       	st	X, r24
		DDRC |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    14cc:	a4 e3       	ldi	r26, 0x34	; 52
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e4 e3       	ldi	r30, 0x34	; 52
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	90 81       	ld	r25, Z
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	89 2b       	or	r24, r25
    14da:	8c 93       	st	X, r24
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <DIO_setDirectionHighNibble+0xd4>
		break;
	case PORTD_INDEX:
		DDRD &= 0x0F; // 0000 0101
    14de:	a1 e3       	ldi	r26, 0x31	; 49
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e1 e3       	ldi	r30, 0x31	; 49
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8f 70       	andi	r24, 0x0F	; 15
    14ea:	8c 93       	st	X, r24
		DDRD |= direction; // 0b0000 0101  | 1100 0000 = 1100 0101
    14ec:	a1 e3       	ldi	r26, 0x31	; 49
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e1 e3       	ldi	r30, 0x31	; 49
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	90 81       	ld	r25, Z
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	89 2b       	or	r24, r25
    14fa:	8c 93       	st	X, r24
		break;
	}
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <DIO_writeLogicHighNibble>:
 * @brief Writes logic levels to the high nibble of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param level Logic levels for the high nibble (use bits 7-4).
 */
void DIO_writeLogicHighNibble(u8 port,u8 level)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <DIO_writeLogicHighNibble+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <DIO_writeLogicHighNibble+0x8>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6a 83       	std	Y+2, r22	; 0x02
	level <<=4; // 1011 0000
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	82 95       	swap	r24
    151e:	80 7f       	andi	r24, 0xF0	; 240
    1520:	8a 83       	std	Y+2, r24	; 0x02
	switch(port)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3c 83       	std	Y+4, r19	; 0x04
    152a:	2b 83       	std	Y+3, r18	; 0x03
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	29 f1       	breq	.+74     	; 0x1580 <DIO_writeLogicHighNibble+0x76>
    1536:	2b 81       	ldd	r18, Y+3	; 0x03
    1538:	3c 81       	ldd	r19, Y+4	; 0x04
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <DIO_writeLogicHighNibble+0x40>
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 f0       	breq	.+24     	; 0x1560 <DIO_writeLogicHighNibble+0x56>
    1548:	4a c0       	rjmp	.+148    	; 0x15de <DIO_writeLogicHighNibble+0xd4>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	31 f1       	breq	.+76     	; 0x15a0 <DIO_writeLogicHighNibble+0x96>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	89 f1       	breq	.+98     	; 0x15c0 <DIO_writeLogicHighNibble+0xb6>
    155e:	3f c0       	rjmp	.+126    	; 0x15de <DIO_writeLogicHighNibble+0xd4>
	{
	case PORTA_INDEX : // 1110 0110
		PORTA &= 0X0F; // 0000 0110
    1560:	ab e3       	ldi	r26, 0x3B	; 59
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8f 70       	andi	r24, 0x0F	; 15
    156c:	8c 93       	st	X, r24
		PORTA |= level;// 0000 0110 | 1011 0000  = 1011 0110
    156e:	ab e3       	ldi	r26, 0x3B	; 59
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	eb e3       	ldi	r30, 0x3B	; 59
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	90 81       	ld	r25, Z
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	89 2b       	or	r24, r25
    157c:	8c 93       	st	X, r24
    157e:	2f c0       	rjmp	.+94     	; 0x15de <DIO_writeLogicHighNibble+0xd4>
		break;
	case PORTB_INDEX :
		PORTB &= 0X0F; // 0000 0110
    1580:	a8 e3       	ldi	r26, 0x38	; 56
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e8 e3       	ldi	r30, 0x38	; 56
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8f 70       	andi	r24, 0x0F	; 15
    158c:	8c 93       	st	X, r24
		PORTB |= level;// 0000 0110 | 1011 0000  = 1011 0110
    158e:	a8 e3       	ldi	r26, 0x38	; 56
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	90 81       	ld	r25, Z
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	89 2b       	or	r24, r25
    159c:	8c 93       	st	X, r24
    159e:	1f c0       	rjmp	.+62     	; 0x15de <DIO_writeLogicHighNibble+0xd4>
		break;
	case PORTC_INDEX :
		PORTC &= 0X0F; // 0000 0110
    15a0:	a5 e3       	ldi	r26, 0x35	; 53
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e3       	ldi	r30, 0x35	; 53
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 70       	andi	r24, 0x0F	; 15
    15ac:	8c 93       	st	X, r24
		PORTC |= level;// 0000 0110 | 1011 0000  = 1011 0110
    15ae:	a5 e3       	ldi	r26, 0x35	; 53
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e5 e3       	ldi	r30, 0x35	; 53
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	90 81       	ld	r25, Z
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	89 2b       	or	r24, r25
    15bc:	8c 93       	st	X, r24
    15be:	0f c0       	rjmp	.+30     	; 0x15de <DIO_writeLogicHighNibble+0xd4>
		break;
	case PORTD_INDEX:
		PORTD &= 0X0F; // 0000 0110
    15c0:	a2 e3       	ldi	r26, 0x32	; 50
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e2 e3       	ldi	r30, 0x32	; 50
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 70       	andi	r24, 0x0F	; 15
    15cc:	8c 93       	st	X, r24
		PORTD |= level;// 0000 0110 | 1011 0000  = 1011 0110
    15ce:	a2 e3       	ldi	r26, 0x32	; 50
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e2 e3       	ldi	r30, 0x32	; 50
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	90 81       	ld	r25, Z
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	89 2b       	or	r24, r25
    15dc:	8c 93       	st	X, r24
		break;
	}
}
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <DIO_readLogicHighNibble>:
 * @brief Reads logic levels from the high nibble of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @return Logic levels of the high nibble (bits 7-4) of the specified port.
 */
u8 DIO_readLogicHighNibble(u8 port)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <DIO_readLogicHighNibble+0x6>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <DIO_readLogicHighNibble+0x8>
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_port = 0x00;
    15fa:	19 82       	std	Y+1, r1	; 0x01
		switch(port)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3c 83       	std	Y+4, r19	; 0x04
    1604:	2b 83       	std	Y+3, r18	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	d9 f0       	breq	.+54     	; 0x1646 <DIO_readLogicHighNibble+0x5a>
    1610:	2b 81       	ldd	r18, Y+3	; 0x03
    1612:	3c 81       	ldd	r19, Y+4	; 0x04
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <DIO_readLogicHighNibble+0x38>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f0       	breq	.+24     	; 0x163a <DIO_readLogicHighNibble+0x4e>
    1622:	22 c0       	rjmp	.+68     	; 0x1668 <DIO_readLogicHighNibble+0x7c>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	91 f0       	breq	.+36     	; 0x1652 <DIO_readLogicHighNibble+0x66>
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	99 f0       	breq	.+38     	; 0x165e <DIO_readLogicHighNibble+0x72>
    1638:	17 c0       	rjmp	.+46     	; 0x1668 <DIO_readLogicHighNibble+0x7c>
		{
		case PORTA_INDEX :
			local_port = PINA & 0XF0;
    163a:	e9 e3       	ldi	r30, 0x39	; 57
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 7f       	andi	r24, 0xF0	; 240
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	11 c0       	rjmp	.+34     	; 0x1668 <DIO_readLogicHighNibble+0x7c>
			break;
		case PORTB_INDEX :
			local_port = PINB & 0XF0;
    1646:	e6 e3       	ldi	r30, 0x36	; 54
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 7f       	andi	r24, 0xF0	; 240
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	0b c0       	rjmp	.+22     	; 0x1668 <DIO_readLogicHighNibble+0x7c>
			break;
		case PORTC_INDEX :
			local_port = PINC & 0XF0;
    1652:	e3 e3       	ldi	r30, 0x33	; 51
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 7f       	andi	r24, 0xF0	; 240
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <DIO_readLogicHighNibble+0x7c>
			break;
		case PORTD_INDEX:
			local_port = PIND & 0XF0;
    165e:	e0 e3       	ldi	r30, 0x30	; 48
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	80 7f       	andi	r24, 0xF0	; 240
    1666:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		local_port >>= 4;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	82 95       	swap	r24
    166c:	8f 70       	andi	r24, 0x0F	; 15
    166e:	89 83       	std	Y+1, r24	; 0x01
		return local_port;
    1670:	89 81       	ldd	r24, Y+1	; 0x01
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <DIO_initHighNibble>:
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the high nibble (bits 7-4), use binary or hexadecimal literals.
 * @param logic Initial logic levels for the high nibble (bits 7-4), use binary or hexadecimal literals.
 */
void DIO_initHighNibble(u8 port,u8 direction,u8 logic)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <DIO_initHighNibble+0x6>
    1686:	0f 92       	push	r0
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setDirectionHighNibble(port,direction);
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	6a 81       	ldd	r22, Y+2	; 0x02
    1696:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_setDirectionHighNibble>
	DIO_writeLogicHighNibble(port,logic);
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	6b 81       	ldd	r22, Y+3	; 0x03
    169e:	0e 94 85 0a 	call	0x150a	; 0x150a <DIO_writeLogicHighNibble>
}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <DIO_toggleHighNibble>:
/**
 * @brief Toggles the logic levels of the high nibble of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 */
void DIO_toggleHighNibble(u8 port)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_toggleHighNibble+0x6>
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3b 83       	std	Y+3, r19	; 0x03
    16c4:	2a 83       	std	Y+2, r18	; 0x02
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	f1 f0       	breq	.+60     	; 0x170c <DIO_toggleHighNibble+0x5e>
    16d0:	2a 81       	ldd	r18, Y+2	; 0x02
    16d2:	3b 81       	ldd	r19, Y+3	; 0x03
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <DIO_toggleHighNibble+0x36>
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	61 f0       	breq	.+24     	; 0x16fa <DIO_toggleHighNibble+0x4c>
    16e2:	2e c0       	rjmp	.+92     	; 0x1740 <DIO_toggleHighNibble+0x92>
    16e4:	2a 81       	ldd	r18, Y+2	; 0x02
    16e6:	3b 81       	ldd	r19, Y+3	; 0x03
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	c1 f0       	breq	.+48     	; 0x171e <DIO_toggleHighNibble+0x70>
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	e1 f0       	breq	.+56     	; 0x1730 <DIO_toggleHighNibble+0x82>
    16f8:	23 c0       	rjmp	.+70     	; 0x1740 <DIO_toggleHighNibble+0x92>
	{
	case PORTA_INDEX :
		PORTA ^= 0xF0;
    16fa:	ab e3       	ldi	r26, 0x3B	; 59
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	eb e3       	ldi	r30, 0x3B	; 59
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	90 81       	ld	r25, Z
    1704:	80 ef       	ldi	r24, 0xF0	; 240
    1706:	89 27       	eor	r24, r25
    1708:	8c 93       	st	X, r24
    170a:	1a c0       	rjmp	.+52     	; 0x1740 <DIO_toggleHighNibble+0x92>
		break;
	case PORTB_INDEX :
		PORTB ^= 0xF0;
    170c:	a8 e3       	ldi	r26, 0x38	; 56
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	90 81       	ld	r25, Z
    1716:	80 ef       	ldi	r24, 0xF0	; 240
    1718:	89 27       	eor	r24, r25
    171a:	8c 93       	st	X, r24
    171c:	11 c0       	rjmp	.+34     	; 0x1740 <DIO_toggleHighNibble+0x92>
		break;
	case PORTC_INDEX :
		PORTC ^= 0xF0;
    171e:	a5 e3       	ldi	r26, 0x35	; 53
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	90 81       	ld	r25, Z
    1728:	80 ef       	ldi	r24, 0xF0	; 240
    172a:	89 27       	eor	r24, r25
    172c:	8c 93       	st	X, r24
    172e:	08 c0       	rjmp	.+16     	; 0x1740 <DIO_toggleHighNibble+0x92>
		break;
	case PORTD_INDEX:
		PORTD ^= 0xF0;
    1730:	a2 e3       	ldi	r26, 0x32	; 50
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e2 e3       	ldi	r30, 0x32	; 50
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	90 81       	ld	r25, Z
    173a:	80 ef       	ldi	r24, 0xF0	; 240
    173c:	89 27       	eor	r24, r25
    173e:	8c 93       	st	X, r24
		break;
	}
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <DIO_setDirectionLowNibble>:
 * @brief Sets the direction of the low nibble (bits 3-0) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the low nibble (use bits 3-0).
 */
void DIO_setDirectionLowNibble(u8 port,u8 direction)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <DIO_setDirectionLowNibble+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_setDirectionLowNibble+0x8>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	6a 83       	std	Y+2, r22	; 0x02
	direction &= 0x0F; // 0000 0110
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	8f 70       	andi	r24, 0x0F	; 15
    1760:	8a 83       	std	Y+2, r24	; 0x02
		switch(port)
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3c 83       	std	Y+4, r19	; 0x04
    176a:	2b 83       	std	Y+3, r18	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	29 f1       	breq	.+74     	; 0x17c0 <DIO_setDirectionLowNibble+0x74>
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	2c f4       	brge	.+10     	; 0x178a <DIO_setDirectionLowNibble+0x3e>
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	61 f0       	breq	.+24     	; 0x17a0 <DIO_setDirectionLowNibble+0x54>
    1788:	4a c0       	rjmp	.+148    	; 0x181e <DIO_setDirectionLowNibble+0xd2>
    178a:	2b 81       	ldd	r18, Y+3	; 0x03
    178c:	3c 81       	ldd	r19, Y+4	; 0x04
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	31 f1       	breq	.+76     	; 0x17e0 <DIO_setDirectionLowNibble+0x94>
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	89 f1       	breq	.+98     	; 0x1800 <DIO_setDirectionLowNibble+0xb4>
    179e:	3f c0       	rjmp	.+126    	; 0x181e <DIO_setDirectionLowNibble+0xd2>
		{
		case PORTA_INDEX :
			DDRA &= 0xF0; // 0101 0000
    17a0:	aa e3       	ldi	r26, 0x3A	; 58
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ea e3       	ldi	r30, 0x3A	; 58
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 7f       	andi	r24, 0xF0	; 240
    17ac:	8c 93       	st	X, r24
			DDRA |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    17ae:	aa e3       	ldi	r26, 0x3A	; 58
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ea e3       	ldi	r30, 0x3A	; 58
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	90 81       	ld	r25, Z
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	89 2b       	or	r24, r25
    17bc:	8c 93       	st	X, r24
    17be:	2f c0       	rjmp	.+94     	; 0x181e <DIO_setDirectionLowNibble+0xd2>
			break;
		case PORTB_INDEX :
			DDRB &= 0xF0; // 0101 0000
    17c0:	a7 e3       	ldi	r26, 0x37	; 55
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e7 e3       	ldi	r30, 0x37	; 55
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	80 7f       	andi	r24, 0xF0	; 240
    17cc:	8c 93       	st	X, r24
			DDRB |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    17ce:	a7 e3       	ldi	r26, 0x37	; 55
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e7 e3       	ldi	r30, 0x37	; 55
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	90 81       	ld	r25, Z
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	89 2b       	or	r24, r25
    17dc:	8c 93       	st	X, r24
    17de:	1f c0       	rjmp	.+62     	; 0x181e <DIO_setDirectionLowNibble+0xd2>
			break;
		case PORTC_INDEX :
			DDRC &= 0xF0; // 0101 0000
    17e0:	a4 e3       	ldi	r26, 0x34	; 52
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e4 e3       	ldi	r30, 0x34	; 52
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 7f       	andi	r24, 0xF0	; 240
    17ec:	8c 93       	st	X, r24
			DDRC |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    17ee:	a4 e3       	ldi	r26, 0x34	; 52
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e4 e3       	ldi	r30, 0x34	; 52
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	90 81       	ld	r25, Z
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	89 2b       	or	r24, r25
    17fc:	8c 93       	st	X, r24
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <DIO_setDirectionLowNibble+0xd2>
			break;
		case PORTD_INDEX:
			DDRD &= 0xF0; // 0101 0000
    1800:	a1 e3       	ldi	r26, 0x31	; 49
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e1 e3       	ldi	r30, 0x31	; 49
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 7f       	andi	r24, 0xF0	; 240
    180c:	8c 93       	st	X, r24
			DDRD |= direction; // 0b0101 0000  | 0000 0110 = 0101 0110
    180e:	a1 e3       	ldi	r26, 0x31	; 49
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e1 e3       	ldi	r30, 0x31	; 49
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	90 81       	ld	r25, Z
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	89 2b       	or	r24, r25
    181c:	8c 93       	st	X, r24
			break;
		}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <DIO_writeLogicLowNibble>:
 * @brief Writes logic levels to the low nibble (bits 3-0) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param level Logic levels for the low nibble (use bits 3-0).
 */
void DIO_writeLogicLowNibble(u8 port,u8 level)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_writeLogicLowNibble+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_writeLogicLowNibble+0x8>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	6a 83       	std	Y+2, r22	; 0x02
	level &= 0x0F; // 0000 0110
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	8f 70       	andi	r24, 0x0F	; 15
    1840:	8a 83       	std	Y+2, r24	; 0x02
	switch(port)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3c 83       	std	Y+4, r19	; 0x04
    184a:	2b 83       	std	Y+3, r18	; 0x03
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	91 05       	cpc	r25, r1
    1854:	29 f1       	breq	.+74     	; 0x18a0 <DIO_writeLogicLowNibble+0x74>
    1856:	2b 81       	ldd	r18, Y+3	; 0x03
    1858:	3c 81       	ldd	r19, Y+4	; 0x04
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <DIO_writeLogicLowNibble+0x3e>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	61 f0       	breq	.+24     	; 0x1880 <DIO_writeLogicLowNibble+0x54>
    1868:	4a c0       	rjmp	.+148    	; 0x18fe <DIO_writeLogicLowNibble+0xd2>
    186a:	2b 81       	ldd	r18, Y+3	; 0x03
    186c:	3c 81       	ldd	r19, Y+4	; 0x04
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	31 f1       	breq	.+76     	; 0x18c0 <DIO_writeLogicLowNibble+0x94>
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	91 05       	cpc	r25, r1
    187c:	89 f1       	breq	.+98     	; 0x18e0 <DIO_writeLogicLowNibble+0xb4>
    187e:	3f c0       	rjmp	.+126    	; 0x18fe <DIO_writeLogicLowNibble+0xd2>
	{
	case PORTA_INDEX : // 1110 0110
		PORTA &= 0XF0; // 1110 0000
    1880:	ab e3       	ldi	r26, 0x3B	; 59
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	eb e3       	ldi	r30, 0x3B	; 59
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 7f       	andi	r24, 0xF0	; 240
    188c:	8c 93       	st	X, r24
		PORTA |= level;// 1110 0000 | 0000 0110  = 1110 0110
    188e:	ab e3       	ldi	r26, 0x3B	; 59
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	eb e3       	ldi	r30, 0x3B	; 59
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	90 81       	ld	r25, Z
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	89 2b       	or	r24, r25
    189c:	8c 93       	st	X, r24
    189e:	2f c0       	rjmp	.+94     	; 0x18fe <DIO_writeLogicLowNibble+0xd2>
		break;
	case PORTB_INDEX :// 1110 0110
		PORTB &= 0XF0; // 1110 0000
    18a0:	a8 e3       	ldi	r26, 0x38	; 56
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 7f       	andi	r24, 0xF0	; 240
    18ac:	8c 93       	st	X, r24
		PORTB |= level;// 1110 0000 | 0000 0110  = 1110 0110
    18ae:	a8 e3       	ldi	r26, 0x38	; 56
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	90 81       	ld	r25, Z
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	89 2b       	or	r24, r25
    18bc:	8c 93       	st	X, r24
    18be:	1f c0       	rjmp	.+62     	; 0x18fe <DIO_writeLogicLowNibble+0xd2>
		break;
	case PORTC_INDEX :// 1110 0110
		PORTC &= 0XF0; // 1110 0000
    18c0:	a5 e3       	ldi	r26, 0x35	; 53
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e3       	ldi	r30, 0x35	; 53
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 7f       	andi	r24, 0xF0	; 240
    18cc:	8c 93       	st	X, r24
		PORTC |= level;// 1110 0000 | 0000 0110  = 1110 0110
    18ce:	a5 e3       	ldi	r26, 0x35	; 53
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e5 e3       	ldi	r30, 0x35	; 53
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	90 81       	ld	r25, Z
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	89 2b       	or	r24, r25
    18dc:	8c 93       	st	X, r24
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <DIO_writeLogicLowNibble+0xd2>
		break;
	case PORTD_INDEX:// 1110 0110
		PORTD &= 0XF0; // 1110 0000
    18e0:	a2 e3       	ldi	r26, 0x32	; 50
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e2 e3       	ldi	r30, 0x32	; 50
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 7f       	andi	r24, 0xF0	; 240
    18ec:	8c 93       	st	X, r24
		PORTD |= level;// 1110 0000 | 0000 0110  = 1110 0110
    18ee:	a2 e3       	ldi	r26, 0x32	; 50
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e2 e3       	ldi	r30, 0x32	; 50
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	90 81       	ld	r25, Z
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	89 2b       	or	r24, r25
    18fc:	8c 93       	st	X, r24
		break;
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <DIO_readLogicLowNibble>:
 * @brief Reads logic levels from the low nibble (bits 3-0) of a digital I/O port.
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @return Logic levels of the low nibble of the specified port.
 */
u8 DIO_readLogicLowNibble(u8 port)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <DIO_readLogicLowNibble+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <DIO_readLogicLowNibble+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_port = 0x00;
    191a:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	3c 83       	std	Y+4, r19	; 0x04
    1924:	2b 83       	std	Y+3, r18	; 0x03
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	91 05       	cpc	r25, r1
    192e:	d9 f0       	breq	.+54     	; 0x1966 <DIO_readLogicLowNibble+0x5a>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	2c f4       	brge	.+10     	; 0x1944 <DIO_readLogicLowNibble+0x38>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	61 f0       	breq	.+24     	; 0x195a <DIO_readLogicLowNibble+0x4e>
    1942:	22 c0       	rjmp	.+68     	; 0x1988 <DIO_readLogicLowNibble+0x7c>
    1944:	2b 81       	ldd	r18, Y+3	; 0x03
    1946:	3c 81       	ldd	r19, Y+4	; 0x04
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	91 f0       	breq	.+36     	; 0x1972 <DIO_readLogicLowNibble+0x66>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	91 05       	cpc	r25, r1
    1956:	99 f0       	breq	.+38     	; 0x197e <DIO_readLogicLowNibble+0x72>
    1958:	17 c0       	rjmp	.+46     	; 0x1988 <DIO_readLogicLowNibble+0x7c>
	{
	case PORTA_INDEX :
		local_port = PINA & 0X0F;
    195a:	e9 e3       	ldi	r30, 0x39	; 57
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8f 70       	andi	r24, 0x0F	; 15
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	11 c0       	rjmp	.+34     	; 0x1988 <DIO_readLogicLowNibble+0x7c>
		break;
	case PORTB_INDEX :
		local_port = PINB & 0X0F;
    1966:	e6 e3       	ldi	r30, 0x36	; 54
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8f 70       	andi	r24, 0x0F	; 15
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	0b c0       	rjmp	.+22     	; 0x1988 <DIO_readLogicLowNibble+0x7c>
		break;
	case PORTC_INDEX :
		local_port = PINC & 0X0F;
    1972:	e3 e3       	ldi	r30, 0x33	; 51
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 70       	andi	r24, 0x0F	; 15
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <DIO_readLogicLowNibble+0x7c>
		break;
	case PORTD_INDEX:
		local_port = PIND & 0X0F;
    197e:	e0 e3       	ldi	r30, 0x30	; 48
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8f 70       	andi	r24, 0x0F	; 15
    1986:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_port;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <DIO_initLowNibble>:
 * @param port Index of the I/O port ('A', 'B', 'C', 'D').
 * @param direction Desired direction for the low nibble (use bits 3-0).
 * @param logic Initial logic levels for the low nibble (use bits 3-0).
 */
void DIO_initLowNibble(u8 port,u8 direction,u8 logic)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <DIO_initLowNibble+0x6>
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
    19a8:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setDirectionLowNibble(port,direction);
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	6a 81       	ldd	r22, Y+2	; 0x02
    19ae:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_setDirectionLowNibble>
	DIO_writeLogicLowNibble(port,logic);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	6b 81       	ldd	r22, Y+3	; 0x03
    19b6:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_writeLogicLowNibble>
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <DIO_toggleLowNibble>:




void DIO_toggleLowNibble(u8 port)
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <DIO_toggleLowNibble+0x6>
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	3b 83       	std	Y+3, r19	; 0x03
    19dc:	2a 83       	std	Y+2, r18	; 0x02
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	91 05       	cpc	r25, r1
    19e6:	f1 f0       	breq	.+60     	; 0x1a24 <DIO_toggleLowNibble+0x5e>
    19e8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ea:	3b 81       	ldd	r19, Y+3	; 0x03
    19ec:	22 30       	cpi	r18, 0x02	; 2
    19ee:	31 05       	cpc	r19, r1
    19f0:	2c f4       	brge	.+10     	; 0x19fc <DIO_toggleLowNibble+0x36>
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	61 f0       	breq	.+24     	; 0x1a12 <DIO_toggleLowNibble+0x4c>
    19fa:	2e c0       	rjmp	.+92     	; 0x1a58 <DIO_toggleLowNibble+0x92>
    19fc:	2a 81       	ldd	r18, Y+2	; 0x02
    19fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	c1 f0       	breq	.+48     	; 0x1a36 <DIO_toggleLowNibble+0x70>
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	e1 f0       	breq	.+56     	; 0x1a48 <DIO_toggleLowNibble+0x82>
    1a10:	23 c0       	rjmp	.+70     	; 0x1a58 <DIO_toggleLowNibble+0x92>
	{
	case PORTA_INDEX :
		PORTA ^= 0x0F;
    1a12:	ab e3       	ldi	r26, 0x3B	; 59
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	90 81       	ld	r25, Z
    1a1c:	8f e0       	ldi	r24, 0x0F	; 15
    1a1e:	89 27       	eor	r24, r25
    1a20:	8c 93       	st	X, r24
    1a22:	1a c0       	rjmp	.+52     	; 0x1a58 <DIO_toggleLowNibble+0x92>
		break;
	case PORTB_INDEX :
		PORTB ^= 0x0F;
    1a24:	a8 e3       	ldi	r26, 0x38	; 56
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e8 e3       	ldi	r30, 0x38	; 56
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	90 81       	ld	r25, Z
    1a2e:	8f e0       	ldi	r24, 0x0F	; 15
    1a30:	89 27       	eor	r24, r25
    1a32:	8c 93       	st	X, r24
    1a34:	11 c0       	rjmp	.+34     	; 0x1a58 <DIO_toggleLowNibble+0x92>
		break;
	case PORTC_INDEX :
		PORTC ^= 0x0F;
    1a36:	a5 e3       	ldi	r26, 0x35	; 53
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e5 e3       	ldi	r30, 0x35	; 53
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	90 81       	ld	r25, Z
    1a40:	8f e0       	ldi	r24, 0x0F	; 15
    1a42:	89 27       	eor	r24, r25
    1a44:	8c 93       	st	X, r24
    1a46:	08 c0       	rjmp	.+16     	; 0x1a58 <DIO_toggleLowNibble+0x92>
		break;
	case PORTD_INDEX:
		PORTD ^= 0x0F;
    1a48:	a2 e3       	ldi	r26, 0x32	; 50
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e2 e3       	ldi	r30, 0x32	; 50
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	90 81       	ld	r25, Z
    1a52:	8f e0       	ldi	r24, 0x0F	; 15
    1a54:	89 27       	eor	r24, r25
    1a56:	8c 93       	st	X, r24
		break;
	}
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <SSD_init>:
}ssd_t; // with decoder
 */


void SSD_init(const ssd_t *ssd)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <SSD_init+0x6>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
#if(ENABLE_BIT == ENABLE_BIT_ON)
	DIO_initPin(&(ssd->enable));
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_initPin>
#endif
	if(ssd->connection_type == SSD_DIRECT_CONNECTION)
    1a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7e:	87 81       	ldd	r24, Z+7	; 0x07
    1a80:	88 23       	and	r24, r24
    1a82:	41 f4       	brne	.+16     	; 0x1a94 <SSD_init+0x30>
	{
		DIO_initPort(ssd->port,0xFF,DIO_LOW); // NOTE : the last pin will be the enable
    1a84:	e9 81       	ldd	r30, Y+1	; 0x01
    1a86:	fa 81       	ldd	r31, Y+2	; 0x02
    1a88:	84 81       	ldd	r24, Z+4	; 0x04
    1a8a:	6f ef       	ldi	r22, 0xFF	; 255
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	0e 94 b2 09 	call	0x1364	; 0x1364 <DIO_initPort>
    1a92:	1e c0       	rjmp	.+60     	; 0x1ad0 <SSD_init+0x6c>
	}
	else if(ssd->connection_type == SSD_DECODER_CONNECTION)
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	87 81       	ldd	r24, Z+7	; 0x07
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	c9 f4       	brne	.+50     	; 0x1ad0 <SSD_init+0x6c>
	{
		if(ssd->pins_location == SSD_HIGHER_NIBBLE)
    1a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa2:	85 81       	ldd	r24, Z+5	; 0x05
    1aa4:	88 23       	and	r24, r24
    1aa6:	41 f4       	brne	.+16     	; 0x1ab8 <SSD_init+0x54>
		{
			DIO_initHighNibble(ssd->port,0x0F,DIO_LOW);
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	84 81       	ldd	r24, Z+4	; 0x04
    1aae:	6f e0       	ldi	r22, 0x0F	; 15
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	0e 94 40 0b 	call	0x1680	; 0x1680 <DIO_initHighNibble>
    1ab6:	0c c0       	rjmp	.+24     	; 0x1ad0 <SSD_init+0x6c>
		}
		else if(ssd->pins_location == SSD_LOWER_NIBBLE)
    1ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aba:	fa 81       	ldd	r31, Y+2	; 0x02
    1abc:	85 81       	ldd	r24, Z+5	; 0x05
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	39 f4       	brne	.+14     	; 0x1ad0 <SSD_init+0x6c>
		{
			DIO_initLowNibble(ssd->port,0x0f,DIO_LOW);
    1ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac6:	84 81       	ldd	r24, Z+4	; 0x04
    1ac8:	6f e0       	ldi	r22, 0x0F	; 15
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_initLowNibble>
		}
	}
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <SSD_writeNumber>:

void SSD_writeNumber(const ssd_t *ssd,u8 number)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <SSD_writeNumber+0x6>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	6b 83       	std	Y+3, r22	; 0x03
	if(ssd->connection_type == SSD_DIRECT_CONNECTION)
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	87 81       	ldd	r24, Z+7	; 0x07
    1af2:	88 23       	and	r24, r24
    1af4:	41 f5       	brne	.+80     	; 0x1b46 <SSD_writeNumber+0x6c>
	{
		if(ssd->ssd_common == SSD_COMMON_CATHOD)
    1af6:	e9 81       	ldd	r30, Y+1	; 0x01
    1af8:	fa 81       	ldd	r31, Y+2	; 0x02
    1afa:	86 81       	ldd	r24, Z+6	; 0x06
    1afc:	88 23       	and	r24, r24
    1afe:	79 f4       	brne	.+30     	; 0x1b1e <SSD_writeNumber+0x44>
		{
			DIO_writeLogicPort(ssd->port,common_cathod_numbers[number]);
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	24 81       	ldd	r18, Z+4	; 0x04
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e8 59       	subi	r30, 0x98	; 152
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	90 81       	ld	r25, Z
    1b14:	82 2f       	mov	r24, r18
    1b16:	69 2f       	mov	r22, r25
    1b18:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_writeLogicPort>
    1b1c:	30 c0       	rjmp	.+96     	; 0x1b7e <SSD_writeNumber+0xa4>
		}
		else if(ssd->ssd_common == SSD_COMMON_ANODE)
    1b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b20:	fa 81       	ldd	r31, Y+2	; 0x02
    1b22:	86 81       	ldd	r24, Z+6	; 0x06
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	59 f5       	brne	.+86     	; 0x1b7e <SSD_writeNumber+0xa4>
		{
			DIO_writeLogicPort(ssd->port,common_anode_numbers[number]);
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	24 81       	ldd	r18, Z+4	; 0x04
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	fc 01       	movw	r30, r24
    1b36:	ee 58       	subi	r30, 0x8E	; 142
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	90 81       	ld	r25, Z
    1b3c:	82 2f       	mov	r24, r18
    1b3e:	69 2f       	mov	r22, r25
    1b40:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_writeLogicPort>
    1b44:	1c c0       	rjmp	.+56     	; 0x1b7e <SSD_writeNumber+0xa4>
		}

	}
	else if(ssd->connection_type == SSD_DECODER_CONNECTION)
    1b46:	e9 81       	ldd	r30, Y+1	; 0x01
    1b48:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4a:	87 81       	ldd	r24, Z+7	; 0x07
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	b9 f4       	brne	.+46     	; 0x1b7e <SSD_writeNumber+0xa4>
	{
		if(ssd->pins_location == SSD_HIGHER_NIBBLE)
    1b50:	e9 81       	ldd	r30, Y+1	; 0x01
    1b52:	fa 81       	ldd	r31, Y+2	; 0x02
    1b54:	85 81       	ldd	r24, Z+5	; 0x05
    1b56:	88 23       	and	r24, r24
    1b58:	39 f4       	brne	.+14     	; 0x1b68 <SSD_writeNumber+0x8e>
		{
			DIO_writeLogicHighNibble(ssd->port,number);
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	84 81       	ldd	r24, Z+4	; 0x04
    1b60:	6b 81       	ldd	r22, Y+3	; 0x03
    1b62:	0e 94 85 0a 	call	0x150a	; 0x150a <DIO_writeLogicHighNibble>
    1b66:	0b c0       	rjmp	.+22     	; 0x1b7e <SSD_writeNumber+0xa4>
		}
		else if(ssd->pins_location == SSD_LOWER_NIBBLE)
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	85 81       	ldd	r24, Z+5	; 0x05
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	31 f4       	brne	.+12     	; 0x1b7e <SSD_writeNumber+0xa4>
		{
			DIO_writeLogicLowNibble(ssd->port,number);
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	84 81       	ldd	r24, Z+4	; 0x04
    1b78:	6b 81       	ldd	r22, Y+3	; 0x03
    1b7a:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_writeLogicLowNibble>
		}
	}
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <SSD_enable>:



void SSD_enable(const ssd_t *ssd)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <SSD_enable+0x6>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
	if(ssd->ssd_common == SSD_COMMON_CATHOD)
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	86 81       	ldd	r24, Z+6	; 0x06
    1b9e:	88 23       	and	r24, r24
    1ba0:	31 f4       	brne	.+12     	; 0x1bae <SSD_enable+0x24>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_LOW);
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
    1bac:	0a c0       	rjmp	.+20     	; 0x1bc2 <SSD_enable+0x38>
	}
	else if(ssd->ssd_common == SSD_COMMON_ANODE)
    1bae:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb2:	86 81       	ldd	r24, Z+6	; 0x06
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	29 f4       	brne	.+10     	; 0x1bc2 <SSD_enable+0x38>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_HIGH);
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <SSD_disable>:
void SSD_disable(const ssd_t *ssd)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <SSD_disable+0x6>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	if(ssd->ssd_common == SSD_COMMON_CATHOD)
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	86 81       	ldd	r24, Z+6	; 0x06
    1be0:	88 23       	and	r24, r24
    1be2:	31 f4       	brne	.+12     	; 0x1bf0 <SSD_disable+0x24>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_HIGH);
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	61 e0       	ldi	r22, 0x01	; 1
    1bea:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
    1bee:	0a c0       	rjmp	.+20     	; 0x1c04 <SSD_disable+0x38>
	}
	else if(ssd->ssd_common == SSD_COMMON_ANODE)
    1bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf4:	86 81       	ldd	r24, Z+6	; 0x06
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <SSD_disable+0x38>
	{
		DIO_writeLogicPin(&(ssd->enable),DIO_LOW);
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
	}
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <LED_init>:
/**
 * @brief Initialize a LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_init(const led_t *led)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <LED_init+0x6>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	DIO_setDirectonPin(&(led->pin),DIO_OUTPUT);
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setDirectonPin>
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <LED_turnOn>:
/**
 * @brief Turn on the LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_turnOn(const led_t *led)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <LED_turnOn+0x6>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	if(led->connection_type == LED_ACTIVE_HIGH)
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	84 81       	ldd	r24, Z+4	; 0x04
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	31 f4       	brne	.+12     	; 0x1c54 <LED_turnOn+0x24>
	{
		DIO_writeLogicPin(&(led->pin),DIO_HIGH);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
    1c52:	0a c0       	rjmp	.+20     	; 0x1c68 <LED_turnOn+0x38>
	}
	else if(led->connection_type == LED_ACTIVE_LOW)
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	84 81       	ldd	r24, Z+4	; 0x04
    1c5a:	88 23       	and	r24, r24
    1c5c:	29 f4       	brne	.+10     	; 0x1c68 <LED_turnOn+0x38>
	{
		DIO_writeLogicPin(&(led->pin),DIO_LOW);
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
	}
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <LED_turnOff>:
/**
 * @brief Turn off the LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_turnOff(const led_t *led)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <LED_turnOff+0x6>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	if(led->connection_type == LED_ACTIVE_HIGH)
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	84 81       	ldd	r24, Z+4	; 0x04
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	31 f4       	brne	.+12     	; 0x1c96 <LED_turnOff+0x24>
	{
		DIO_writeLogicPin(&(led->pin),DIO_LOW);
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
    1c94:	0a c0       	rjmp	.+20     	; 0x1caa <LED_turnOff+0x38>
	}
	else if(led->connection_type == LED_ACTIVE_LOW)
    1c96:	e9 81       	ldd	r30, Y+1	; 0x01
    1c98:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9a:	84 81       	ldd	r24, Z+4	; 0x04
    1c9c:	88 23       	and	r24, r24
    1c9e:	29 f4       	brne	.+10     	; 0x1caa <LED_turnOff+0x38>
	{
		DIO_writeLogicPin(&(led->pin),DIO_HIGH);
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_writeLogicPin>
	}
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <LED_toggle>:
/**
 * @brief Toggle the state of the LED based on the provided configuration.
 * @param led Pointer to the led_t structure representing the LED configuration.
 */
void LED_toggle(led_t *led)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <LED_toggle+0x6>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	DIO_togglePin(&led->pin);
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO_togglePin>
}
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <main>:
};


u8 counter = 0B00000001;
int main(void)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	2e 97       	sbiw	r28, 0x0e	; 14
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    SSD_init(&ssd1);
    1ce8:	8c e7       	ldi	r24, 0x7C	; 124
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <SSD_init>
   //SSD_init(&ssd2);

    while (1)
    {
    	DIO_writeLogicPort(PORTC_INDEX,counter);
    1cf0:	90 91 84 00 	lds	r25, 0x0084
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	69 2f       	mov	r22, r25
    1cf8:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_writeLogicPort>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	aa ef       	ldi	r26, 0xFA	; 250
    1d02:	b3 e4       	ldi	r27, 0x43	; 67
    1d04:	8b 87       	std	Y+11, r24	; 0x0b
    1d06:	9c 87       	std	Y+12, r25	; 0x0c
    1d08:	ad 87       	std	Y+13, r26	; 0x0d
    1d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a e7       	ldi	r20, 0x7A	; 122
    1d1a:	53 e4       	ldi	r21, 0x43	; 67
    1d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	8f 83       	std	Y+7, r24	; 0x07
    1d26:	98 87       	std	Y+8, r25	; 0x08
    1d28:	a9 87       	std	Y+9, r26	; 0x09
    1d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <main+0x7a>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <main+0xf8>
	else if (__tmp > 65535)
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	4c f5       	brge	.+82     	; 0x1db8 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <main+0xda>
    1d90:	89 e1       	ldi	r24, 0x19	; 25
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <main+0xc8>
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <main+0xbc>
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dba:	78 85       	ldd	r23, Y+8	; 0x08
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <main+0x104>
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(500);
    	counter<<=1;
    1de0:	80 91 84 00 	lds	r24, 0x0084
    1de4:	88 0f       	add	r24, r24
    1de6:	80 93 84 00 	sts	0x0084, r24
    	if(counter == 0x00)
    1dea:	80 91 84 00 	lds	r24, 0x0084
    1dee:	88 23       	and	r24, r24
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <main+0x120>
    1df2:	7e cf       	rjmp	.-260    	; 0x1cf0 <main+0x1c>
    	{
    		counter = 0x01;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 84 00 	sts	0x0084, r24
    1dfa:	7a cf       	rjmp	.-268    	; 0x1cf0 <main+0x1c>

00001dfc <__prologue_saves__>:
    1dfc:	2f 92       	push	r2
    1dfe:	3f 92       	push	r3
    1e00:	4f 92       	push	r4
    1e02:	5f 92       	push	r5
    1e04:	6f 92       	push	r6
    1e06:	7f 92       	push	r7
    1e08:	8f 92       	push	r8
    1e0a:	9f 92       	push	r9
    1e0c:	af 92       	push	r10
    1e0e:	bf 92       	push	r11
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	ca 1b       	sub	r28, r26
    1e26:	db 0b       	sbc	r29, r27
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	09 94       	ijmp

00001e34 <__epilogue_restores__>:
    1e34:	2a 88       	ldd	r2, Y+18	; 0x12
    1e36:	39 88       	ldd	r3, Y+17	; 0x11
    1e38:	48 88       	ldd	r4, Y+16	; 0x10
    1e3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e40:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e42:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e44:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e46:	b9 84       	ldd	r11, Y+9	; 0x09
    1e48:	c8 84       	ldd	r12, Y+8	; 0x08
    1e4a:	df 80       	ldd	r13, Y+7	; 0x07
    1e4c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e4e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e50:	0c 81       	ldd	r16, Y+4	; 0x04
    1e52:	1b 81       	ldd	r17, Y+3	; 0x03
    1e54:	aa 81       	ldd	r26, Y+2	; 0x02
    1e56:	b9 81       	ldd	r27, Y+1	; 0x01
    1e58:	ce 0f       	add	r28, r30
    1e5a:	d1 1d       	adc	r29, r1
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	ed 01       	movw	r28, r26
    1e68:	08 95       	ret

00001e6a <_exit>:
    1e6a:	f8 94       	cli

00001e6c <__stop_program>:
    1e6c:	ff cf       	rjmp	.-2      	; 0x1e6c <__stop_program>
